/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Ruby specific begin


#define SWIGRUBY
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Ruby extensions.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_NOUEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swift
*/
#ifndef SWIG_DIRECTOR_NOUEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <map>

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)

namespace Swig {
  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem()
    {
    }

    virtual ruby_owntype get_own() const
    {
      return 0;
    }
  };
  
  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }
    
    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };


  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  struct GCItem_Object : GCItem
  {
    GCItem_Object(ruby_owntype own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    ruby_owntype get_own() const
    {
      return _own;
    }
    
  private:
    ruby_owntype _own;
  };


  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };


  /* body args */
  struct body_args {
    VALUE recv;
    ID id;
    int argc;
    VALUE *argv;
  };
  
  /* Base class for director exceptions */
  class DirectorException {
  protected:
    VALUE swig_error;
    std::string swig_msg;
  protected:
    DirectorException(VALUE error)
      : swig_error(error)
    {
    }
    
    DirectorException(VALUE error, const char* hdr, const char* msg ="") 
      : swig_error(error), swig_msg(hdr) {
      if (strlen(msg)) {
	swig_msg += " ";
	swig_msg += msg;
      }
      if (swig_msg.size()) {
	VALUE str = rb_str_new(swig_msg.data(), swig_msg.size());
	swig_error = rb_exc_new3(error, str);
      } else {
	swig_error = error;
      }
    }
  public:
    VALUE getType() const  { 
      return CLASS_OF(swig_error); 
    }
    VALUE getError() const {
      return swig_error;
    }
    const std::string& getMessage() const 
    {
      return swig_msg;
    }
    
    virtual ~DirectorException() {}
  };
  
  /* unknown exception handler  */

  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
	throw;
      } catch (DirectorException& e) {
	std::cerr << "SWIG Director exception caught:" << std::endl
		  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
	std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
	std::cerr << "Unknown exception caught." << std::endl;
      }      
      std::cerr << std::endl
		<< "Ruby interpreter traceback:" << std::endl;
      std::cerr << std::endl;      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
		<< "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
		<< std::endl
		<< "Exception is being re-thrown, program will like abort/terminate." << std::endl;
      throw;
    }
    
  public:    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };


  /* Type mismatch in the return value from a Ruby method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(VALUE error, const char *msg="")
      : Swig::DirectorException(error, "SWIG director type mismatch", msg) 
    {
    }

    DirectorTypeMismatchException(const char *msg="")
      : Swig::DirectorException(rb_eTypeError, "SWIG director type mismatch", msg) 
    {
    }

    static void raise(VALUE error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* Any Ruby exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(VALUE error) 
      : Swig::DirectorException(error) {
    }

    DirectorMethodException(const char* msg = "") 
      : Swig::DirectorException(rb_eRuntimeError, "SWIG director method error.", msg) {
    }
    
    static void raise(VALUE error)
    {
      throw DirectorMethodException(error);
    }    
  };

  /* Attempted to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(rb_eRuntimeError, "SWIG director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };

  /* Simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
# define __PTHREAD__
# if defined(_WIN32) || defined(__WIN32__)
#  define pthread_mutex_lock EnterCriticalSection
#  define pthread_mutex_unlock LeaveCriticalSection
#  define pthread_mutex_t CRITICAL_SECTION
#  define SWIG_MUTEX_INIT(var) var
# else
#  include <pthread.h>
#  define SWIG_MUTEX_INIT(var) var = PTHREAD_MUTEX_INITIALIZER 
# endif
#endif

#ifdef  __PTHREAD__
  struct Guard
  {
    pthread_mutex_t *_mutex;
    
    Guard(pthread_mutex_t &mutex) : _mutex(&mutex)
    {
      pthread_mutex_lock(_mutex);
    }
    
    ~Guard()
    {
      pthread_mutex_unlock(_mutex);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped Ruby object */
    VALUE swig_self;
    /* flag indicating whether the object is owned by Ruby or c++ */
    mutable bool swig_disown_flag;

  public:
    /* wrap a Ruby object, optionally taking ownership */
    Director(VALUE self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
    }

    /* return a pointer to the wrapped Ruby object */
    VALUE swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped Ruby object (the sense of "disown"
     * is from Ruby) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag = true;
      } 
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __PTHREAD__
    static pthread_mutex_t swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {	
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, ruby_owntype own) const
    {
      if (vptr && own) {
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCItem_Object(own);
      }
    }
    
    ruby_owntype swig_release_ownership(void *vptr) const
    {
      ruby_owntype own = 0;
      if (vptr) {
	SWIG_GUARD(swig_mutex_own);
	swig_ownership_map::iterator iter = swig_owner.find(vptr);
	if (iter != swig_owner.end()) {
	  own = iter->second->get_own();
	  swig_owner.erase(iter);
	}
      }
      return own;
    }
  };
}

#endif /* __cplusplus */



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Leap__CircleGesture swig_types[0]
#define SWIGTYPE_p_Leap__Config swig_types[1]
#define SWIGTYPE_p_Leap__Controller swig_types[2]
#define SWIGTYPE_p_Leap__Finger swig_types[3]
#define SWIGTYPE_p_Leap__FingerList swig_types[4]
#define SWIGTYPE_p_Leap__Frame swig_types[5]
#define SWIGTYPE_p_Leap__Gesture swig_types[6]
#define SWIGTYPE_p_Leap__GestureList swig_types[7]
#define SWIGTYPE_p_Leap__Hand swig_types[8]
#define SWIGTYPE_p_Leap__HandList swig_types[9]
#define SWIGTYPE_p_Leap__Interface swig_types[10]
#define SWIGTYPE_p_Leap__KeyTapGesture swig_types[11]
#define SWIGTYPE_p_Leap__Listener swig_types[12]
#define SWIGTYPE_p_Leap__Matrix swig_types[13]
#define SWIGTYPE_p_Leap__Pointable swig_types[14]
#define SWIGTYPE_p_Leap__PointableList swig_types[15]
#define SWIGTYPE_p_Leap__Screen swig_types[16]
#define SWIGTYPE_p_Leap__ScreenList swig_types[17]
#define SWIGTYPE_p_Leap__ScreenTapGesture swig_types[18]
#define SWIGTYPE_p_Leap__SwipeGesture swig_types[19]
#define SWIGTYPE_p_Leap__Tool swig_types[20]
#define SWIGTYPE_p_Leap__ToolList swig_types[21]
#define SWIGTYPE_p_Leap__Vector swig_types[22]
#define SWIGTYPE_p_char swig_types[23]
#define SWIGTYPE_p_int swig_types[24]
#define SWIGTYPE_p_long_long swig_types[25]
#define SWIGTYPE_p_short swig_types[26]
#define SWIGTYPE_p_signed_char swig_types[27]
#define SWIGTYPE_p_swig__ConstIterator swig_types[28]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[29]
#define SWIGTYPE_p_swig__Iterator swig_types[30]
#define SWIGTYPE_p_unsigned_char swig_types[31]
#define SWIGTYPE_p_unsigned_int swig_types[32]
#define SWIGTYPE_p_unsigned_long_long swig_types[33]
#define SWIGTYPE_p_unsigned_short swig_types[34]
#define SWIGTYPE_p_void swig_types[35]
static swig_type_info *swig_types[37];
static swig_module_info swig_module = {swig_types, 36, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_motion
#define SWIG_name    "Leap::Motion"

static VALUE mMotion;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020009 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


#include <iostream>


#include <stdexcept>


namespace swig {
  class GC_VALUE {
  protected:
    // Hash of all GC_VALUE's currently in use
    static VALUE _hash;

    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    static void initialize()
    {
      if ( _hash == Qnil ) 
	{ 
	  _hash = rb_hash_new();
	  rb_gc_register_address( &_hash );
	}
    }

    // this function is never called.  Provided for symmetry only.
    static void cleanup()
    {
      rb_gc_unregister_address( &_hash );
    }

    GC_VALUE() : _obj( Qnil )
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      GC_register();
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      GC_register();
    }
    
    ~GC_VALUE() 
    {
      GC_unregister();
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      GC_unregister();
      _obj = item._obj;
      GC_register();
      return *this;
    }

    void GC_register()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
      ++n;
      rb_hash_aset( _hash, _obj, INT2NUM(n) );
    }

    void GC_unregister()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if ( BUILTIN_TYPE(_obj) == T_NONE ) return;

      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
      --n;
      if ( n )
	rb_hash_aset( _hash, _obj, INT2NUM(n) );
      else
	rb_hash_delete( _hash, _obj );
    }
    
    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_protect_funcall( VALUE p )
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall( args->src, args->id, args->nargs, args->target );
    }


#define GC_VALUE_CMP( op_id, op, cmp, cmpval ) \
    bool op( const GC_VALUE& other ) const \
    { \
      if ( FIXNUM_P(_obj) && FIXNUM_P(other._obj) ) \
      { \
	return _obj cmp other._obj; \
      } \
      bool  res = false; \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      if ( rb_respond_to( _obj, op_id ) == Qtrue ) \
	{ \
	  int status; \
	  OpArgs  args; \
          args.src    = _obj; \
	  args.id     = op_id; \
	  args.nargs  = 1; \
	  args.target = VALUE(other); \
	  ret = rb_protect( PROTECTFUNC(swig_protect_funcall), \
                            VALUE(&args), &status ); \
	} \
      if ( ret == Qnil ) { \
	VALUE a = rb_funcall(         _obj, hash_id, 0 ); \
	VALUE b = rb_funcall( VALUE(other), hash_id, 0 ); \
	res = a cmp b; \
      } \
      else \
	{ \
	  res = RTEST( ret ); \
	} \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return res; \
    }


    GC_VALUE_CMP( eq_id, operator==, ==, == 0 )
    GC_VALUE_CMP( lt_id, operator<,  < , <  0 )
    GC_VALUE_CMP( le_id, operator<=, <=, <= 0 )
    GC_VALUE_CMP( gt_id, operator>,  > , >  0 )
    GC_VALUE_CMP( ge_id, operator>=, >=, >= 0 )
#undef GC_VALUE_CMP

    bool operator!=( const GC_VALUE& other )
    {
      return !(this->operator==(other));
    }

#define GC_VALUE_UNARY( proc_id, op ) \
    GC_VALUE op() const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 0; \
      args.target = Qnil; \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return ret; \
    }

    GC_VALUE_UNARY( pos_id, operator+ )
    GC_VALUE_UNARY( neg_id, operator- )
    GC_VALUE_UNARY( inv_id, operator~ )
#undef GC_VALUE_BINARY

#define GC_VALUE_BINARY( proc_id, op ) \
    GC_VALUE op( const GC_VALUE& other ) const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 1; \
      args.target = VALUE(other); \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return GC_VALUE(ret); \
    }

    GC_VALUE_BINARY( add_id, operator+ );
    GC_VALUE_BINARY( sub_id, operator- );
    GC_VALUE_BINARY( mul_id, operator* );
    GC_VALUE_BINARY( div_id, operator/ );
    GC_VALUE_BINARY( mod_id, operator% );
    
    GC_VALUE_BINARY( and_id, operator& );
    GC_VALUE_BINARY( xor_id, operator^ );
    GC_VALUE_BINARY(  or_id, operator| );

    GC_VALUE_BINARY( lshift_id, operator<< );
    GC_VALUE_BINARY( rshift_id, operator>> );
#undef GC_VALUE_BINARY

  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  VALUE GC_VALUE::_hash = Qnil;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/local/Cellar/swig/2.0.9/share/swig/2.0.9/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/usr/local/Cellar/swig/2.0.9/share/swig/2.0.9/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <stdint.h>		// Use the C99 official header


#define Leap_Pointable_id_get(self_) self_->id()
  

#define Leap_Pointable_hand_get(self_) new Leap::Hand(self_->hand())
  

#define Leap_Pointable_tipPosition_get(self_) new Leap::Vector(self_->tipPosition())
  

#define Leap_Pointable_tipVelocity_get(self_) new Leap::Vector(self_->tipVelocity())
  

#define Leap_Pointable_direction_get(self_) new Leap::Vector(self_->direction())
  

#define Leap_Pointable_width_get(self_) self_->width()
  

#define Leap_Pointable_length_get(self_) self_->length()
  

#define Leap_Pointable_isTool_get(self_) self_->isTool()
  

#define Leap_Pointable_isFinger_get(self_) self_->isFinger()
  

#define Leap_Pointable_isValid_get(self_) self_->isValid()
  

#define Leap_Pointable_frame_get(self_) new Leap::Frame(self_->frame())
  

#define Leap_Hand_id_get(self_) self_->id()
  

#define Leap_Hand_pointables_get(self_) new Leap::PointableList(self_->pointables())
  

#define Leap_Hand_fingers_get(self_) new Leap::FingerList(self_->fingers())
  

#define Leap_Hand_tools_get(self_) new Leap::ToolList(self_->tools())
  

#define Leap_Hand_palmPosition_get(self_) new Leap::Vector(self_->palmPosition())
  

#define Leap_Hand_palmVelocity_get(self_) new Leap::Vector(self_->palmVelocity())
  

#define Leap_Hand_palmNormal_get(self_) new Leap::Vector(self_->palmNormal())
  

#define Leap_Hand_direction_get(self_) new Leap::Vector(self_->direction())
  

#define Leap_Hand_isValid_get(self_) self_->isValid()
  

#define Leap_Hand_sphereCenter_get(self_) new Leap::Vector(self_->sphereCenter())
  

#define Leap_Hand_sphereRadius_get(self_) self_->sphereRadius()
  

#define Leap_Hand_frame_get(self_) new Leap::Frame(self_->frame())
  

#define Leap_Gesture_type_get(self_) self_->type()
  

#define Leap_Gesture_state_get(self_) self_->state()
  

#define Leap_Gesture_id_get(self_) self_->id()
  

#define Leap_Gesture_duration_get(self_) self_->duration()
  

#define Leap_Gesture_durationSeconds_get(self_) self_->durationSeconds()
  

#define Leap_Gesture_frame_get(self_) new Leap::Frame(self_->frame())
  

#define Leap_Gesture_hands_get(self_) new Leap::HandList(self_->hands())
  

#define Leap_Gesture_pointables_get(self_) new Leap::PointableList(self_->pointables())
  

#define Leap_Gesture_isValid_get(self_) self_->isValid()
  

#define Leap_CircleGesture_center_get(self_) new Leap::Vector(self_->center())
  

#define Leap_CircleGesture_normal_get(self_) new Leap::Vector(self_->normal())
  

#define Leap_CircleGesture_progress_get(self_) self_->progress()
  

#define Leap_CircleGesture_radius_get(self_) self_->radius()
  

#define Leap_CircleGesture_pointable_get(self_) new Leap::Pointable(self_->pointable())
  

#define Leap_SwipeGesture_startPosition_get(self_) new Leap::Vector(self_->startPosition())
  

#define Leap_SwipeGesture_position_get(self_) new Leap::Vector(self_->position())
  

#define Leap_SwipeGesture_direction_get(self_) new Leap::Vector(self_->direction())
  

#define Leap_SwipeGesture_speed_get(self_) self_->speed()
  

#define Leap_SwipeGesture_pointable_get(self_) new Leap::Pointable(self_->pointable())
  

#define Leap_ScreenTapGesture_position_get(self_) new Leap::Vector(self_->position())
  

#define Leap_ScreenTapGesture_direction_get(self_) new Leap::Vector(self_->direction())
  

#define Leap_ScreenTapGesture_progress_get(self_) self_->progress()
  

#define Leap_ScreenTapGesture_pointable_get(self_) new Leap::Pointable(self_->pointable())
  

#define Leap_KeyTapGesture_position_get(self_) new Leap::Vector(self_->position())
  

#define Leap_KeyTapGesture_direction_get(self_) new Leap::Vector(self_->direction())
  

#define Leap_KeyTapGesture_progress_get(self_) self_->progress()
  

#define Leap_KeyTapGesture_pointable_get(self_) new Leap::Pointable(self_->pointable())
  

#define Leap_PointableList_isEmpty_get(self_) self_->isEmpty()
  

#define Leap_FingerList_isEmpty_get(self_) self_->isEmpty()
  

#define Leap_ToolList_isEmpty_get(self_) self_->isEmpty()
  

#define Leap_HandList_isEmpty_get(self_) self_->isEmpty()
  

#define Leap_GestureList_isEmpty_get(self_) self_->isEmpty()
  

#define Leap_ScreenList_isEmpty_get(self_) self_->isEmpty()
  

#define Leap_PointableList_empty_get(self_) self_->empty()
  

#define Leap_FingerList_empty_get(self_) self_->empty()
  

#define Leap_ToolList_empty_get(self_) self_->empty()
  

#define Leap_HandList_empty_get(self_) self_->empty()
  

#define Leap_GestureList_empty_get(self_) self_->empty()
  

#define Leap_ScreenList_empty_get(self_) self_->empty()
  

#define Leap_PointableList_leftmost_get(self_) new Leap::Pointable(self_->leftmost())
  

#define Leap_PointableList_rightmost_get(self_) new Leap::Pointable(self_->rightmost())
  

#define Leap_PointableList_frontmost_get(self_) new Leap::Pointable(self_->frontmost())
  

#define Leap_FingerList_leftmost_get(self_) new Leap::Finger(self_->leftmost())
  

#define Leap_FingerList_rightmost_get(self_) new Leap::Finger(self_->rightmost())
  

#define Leap_FingerList_frontmost_get(self_) new Leap::Finger(self_->frontmost())
  

#define Leap_ToolList_leftmost_get(self_) new Leap::Tool(self_->leftmost())
  

#define Leap_ToolList_rightmost_get(self_) new Leap::Tool(self_->rightmost())
  

#define Leap_ToolList_frontmost_get(self_) new Leap::Tool(self_->frontmost())
  

#define Leap_HandList_leftmost_get(self_) new Leap::Hand(self_->leftmost())
  

#define Leap_HandList_rightmost_get(self_) new Leap::Hand(self_->rightmost())
  

#define Leap_HandList_frontmost_get(self_) new Leap::Hand(self_->frontmost())
  

#define Leap_Frame_id_get(self_) self_->id()
  

#define Leap_Frame_timestamp_get(self_) self_->timestamp()
  

#define Leap_Frame_pointables_get(self_) new Leap::PointableList(self_->pointables())
  

#define Leap_Frame_fingers_get(self_) new Leap::FingerList(self_->fingers())
  

#define Leap_Frame_tools_get(self_) new Leap::ToolList(self_->tools())
  

#define Leap_Frame_hands_get(self_) new Leap::HandList(self_->hands())
  

#define Leap_Frame_isValid_get(self_) self_->isValid()
  

#define Leap_Screen_id_get(self_) self_->id()
  

#define Leap_Screen_horizontalAxis_get(self_) new Leap::Vector(self_->horizontalAxis())
  

#define Leap_Screen_verticalAxis_get(self_) new Leap::Vector(self_->verticalAxis())
  

#define Leap_Screen_bottomLeftCorner_get(self_) new Leap::Vector(self_->bottomLeftCorner())
  

#define Leap_Screen_widthPixels_get(self_) self_->widthPixels()
  

#define Leap_Screen_heightPixels_get(self_) self_->heightPixels()
  

#define Leap_Screen_isValid_get(self_) self_->isValid()
  

#define Leap_Pointable_invalid_get() Leap::Pointable::invalid()
  

#define Leap_Finger_invalid_get() Leap::Finger::invalid()
  

#define Leap_Tool_invalid_get() Leap::Tool::invalid()
  

#define Leap_Hand_invalid_get() Leap::Hand::invalid()
  

#define Leap_Gesture_invalid_get() Leap::Gesture::invalid()
  

#define Leap_Screen_invalid_get() Leap::Screen::invalid()
  

#define Leap_Frame_invalid_get() Leap::Frame::invalid()
  

#define Leap_Vector_magnitude_get(self_) self_->magnitude()
  

#define Leap_Vector_magnitudeSquared_get(self_) self_->magnitudeSquared()
  

#define Leap_Vector_pitch_get(self_) self_->pitch()
  

#define Leap_Vector_roll_get(self_) self_->roll()
  

#define Leap_Vector_yaw_get(self_) self_->yaw()
  

#define Leap_Vector_normalized_get(self_) new Leap::Vector(self_->normalized())
  

#define Leap_Controller_isConnected_get(self_) self_->isConnected()
  

#define Leap_Controller_hasFocus_get(self_) self_->hasFocus()
  

#define Leap_Controller_policyFlags_get(self_) self_->policyFlags()
  

#define Leap_Controller_config_get(self_) new Leap::Config(self_->config())
  

#define Leap_Controller_locatedScreens_get(self_) new Leap::ScreenList(self_->locatedScreens())
  

#define Leap_Controller_calibratedScreens_get(self_) new Leap::ScreenList(self_->calibratedScreens())
  

#define Leap_Vector_zero_get() Leap::Vector::zero()
  

#define Leap_Vector_xAxis_get() Leap::Vector::xAxis()
  

#define Leap_Vector_yAxis_get() Leap::Vector::yAxis()
  

#define Leap_Vector_zAxis_get() Leap::Vector::zAxis()
  

#define Leap_Vector_forward_get() Leap::Vector::forward()
  

#define Leap_Vector_backward_get() Leap::Vector::backward()
  

#define Leap_Vector_left_get() Leap::Vector::left()
  

#define Leap_Vector_right_get() Leap::Vector::right()
  

#define Leap_Vector_up_get() Leap::Vector::up()
  

#define Leap_Vector_down_get() Leap::Vector::down()
  

#define Leap_Matrix_identity_get() Leap::Matrix::identity()
  

#define SWIG
#include "Leap.h"


  #define SWIG_From_double   rb_float_new 


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include <float.h>


/*@SWIG:/usr/local/Cellar/swig/2.0.9/share/swig/2.0.9/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE 
SWIG_From_long_SS_long  (long long value)
{
  return LL2NUM(value);
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

/* ---------------------------------------------------
 * C++ director class helpers
 * --------------------------------------------------- */



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "LeapRuby.h"

SwigDirector_Listener::SwigDirector_Listener(VALUE self): Leap::Listener(), Swig::Director(self) {
  
}



SwigDirector_Listener::~SwigDirector_Listener() {
}

void SwigDirector_Listener::onInit(Leap::Controller const &arg0) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_Leap__Controller,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("on_init"), 1,obj0);
}


void SwigDirector_Listener::onConnect(Leap::Controller const &arg0) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_Leap__Controller,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("on_connect"), 1,obj0);
}


void SwigDirector_Listener::onDisconnect(Leap::Controller const &arg0) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_Leap__Controller,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("on_disconnect"), 1,obj0);
}


void SwigDirector_Listener::onExit(Leap::Controller const &arg0) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_Leap__Controller,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("on_exit"), 1,obj0);
}


void SwigDirector_Listener::onFrame(Leap::Controller const &arg0) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_Leap__Controller,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("on_frame"), 1,obj0);
}


void SwigDirector_Listener::onFocusGained(Leap::Controller const &arg0) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_Leap__Controller,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("on_focus_gained"), 1,obj0);
}


void SwigDirector_Listener::onFocusLost(Leap::Controller const &arg0) {
  VALUE obj0 = Qnil ;
  VALUE result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_Leap__Controller,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("on_focus_lost"), 1,obj0);
}


static swig_class SwigClassGC_VALUE;


/*
  Document-method: Leap::Motion::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Leap::Motion::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


static swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Leap::Motion::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_PI_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_float(static_cast< float >(Leap::PI));
  return _val;
}


SWIGINTERN VALUE
_wrap_DEG_TO_RAD_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_float(static_cast< float >(Leap::DEG_TO_RAD));
  return _val;
}


SWIGINTERN VALUE
_wrap_RAD_TO_DEG_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_float(static_cast< float >(Leap::RAD_TO_DEG));
  return _val;
}


static swig_class SwigClassVector;

SWIGINTERN VALUE
_wrap_new_Vector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Vector";
  Leap::Vector *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Vector *)new Leap::Vector();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Vector";
  Leap::Vector *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float","Vector", 1, argv[0] ));
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Vector", 2, argv[1] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Vector", 3, argv[2] ));
  } 
  arg3 = static_cast< float >(val3);
  result = (Leap::Vector *)new Leap::Vector(arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Vector);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Vector";
  Leap::Vector *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const &","Vector", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Vector", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (Leap::Vector *)new Leap::Vector((Leap::Vector const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vector__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector.new", 
    "    Vector.new()\n"
    "    Vector.new(float _x, float _y, float _z)\n"
    "    Vector.new(Leap::Vector const &vector)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_distance_to(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","distanceTo", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","distanceTo", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","distanceTo", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = (float)((Leap::Vector const *)arg1)->distanceTo((Leap::Vector const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_angle_to(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","angleTo", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","angleTo", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","angleTo", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = (float)((Leap::Vector const *)arg1)->angleTo((Leap::Vector const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_dot(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","dot", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","dot", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","dot", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = (float)((Leap::Vector const *)arg1)->dot((Leap::Vector const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_cross(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","cross", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","cross", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","cross", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = ((Leap::Vector const *)arg1)->cross((Leap::Vector const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Vector.-@

  call-seq:
    -@ -> Vector

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector___neg__(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = ((Leap::Vector const *)arg1)->operator -();
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Vector.+

  call-seq:
    +(other) -> Vector

Add operator.
*/
SWIGINTERN VALUE
_wrap_Vector___add__(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = ((Leap::Vector const *)arg1)->operator +((Leap::Vector const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Vector.-

  call-seq:
    -(other) -> Vector

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector___sub__(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = ((Leap::Vector const *)arg1)->operator -((Leap::Vector const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector___mul__(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = ((Leap::Vector const *)arg1)->operator *(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector___div__(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = ((Leap::Vector const *)arg1)->operator /(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = ((Leap::Vector const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Vector.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector___eq__(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = (bool)((Leap::Vector const *)arg1)->operator ==((Leap::Vector const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_is_valid(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (bool)((Leap::Vector const *)arg1)->isValid();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_x_set(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","x", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_x_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (float) ((arg1)->x);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_y_set(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","y", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->y = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_y_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (float) ((arg1)->y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_z_set(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","z", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","z", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->z = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_z_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","z", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (float) ((arg1)->z);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_magnitude_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","magnitude", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (float)Leap_Vector_magnitude_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_magnitude_squared_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","magnitudeSquared", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (float)Leap_Vector_magnitudeSquared_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_pitch_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","pitch", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (float)Leap_Vector_pitch_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_roll_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","roll", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (float)Leap_Vector_roll_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_yaw_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","yaw", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (float)Leap_Vector_yaw_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_normalized_get(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector *","normalized", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  result = (Leap::Vector *)Leap_Vector_normalized_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector_zero_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::zero()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_x_axis_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::xAxis()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_y_axis_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::yAxis()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_z_axis_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::zAxis()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_forward_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::forward()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_backward_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::backward()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_left_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::left()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_right_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::right()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_up_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::up()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_Vector_down_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Vector::down()), SWIGTYPE_p_Leap__Vector,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Vector(Leap::Vector *arg1) {
    delete arg1;
}

static swig_class SwigClassMatrix;

SWIGINTERN VALUE
_wrap_new_Matrix__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Matrix";
  Leap::Matrix *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Matrix *)new Leap::Matrix();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Matrix";
  Leap::Matrix *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Matrix,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix const &","Matrix", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Matrix const &","Matrix", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  result = (Leap::Matrix *)new Leap::Matrix((Leap::Matrix const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = 0 ;
  Leap::Vector *arg2 = 0 ;
  Leap::Vector *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Matrix";
  Leap::Matrix *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< Leap::Vector * >(argp3);
  result = (Leap::Matrix *)new Leap::Matrix((Leap::Vector const &)*arg1,(Leap::Vector const &)*arg2,(Leap::Vector const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = 0 ;
  Leap::Vector *arg2 = 0 ;
  Leap::Vector *arg3 = 0 ;
  Leap::Vector *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Matrix";
  Leap::Matrix *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< Leap::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 4, argv[3] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 4, argv[3])); 
  }
  arg4 = reinterpret_cast< Leap::Vector * >(argp4);
  result = (Leap::Matrix *)new Leap::Matrix((Leap::Vector const &)*arg1,(Leap::Vector const &)*arg2,(Leap::Vector const &)*arg3,(Leap::Vector const &)*arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = 0 ;
  float arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Matrix";
  Leap::Matrix *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Matrix", 2, argv[1] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (Leap::Matrix *)new Leap::Matrix((Leap::Vector const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Matrix_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Matrix_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Matrix);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Matrix__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Leap::Vector *arg1 = 0 ;
  float arg2 ;
  Leap::Vector *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Matrix";
  Leap::Matrix *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Matrix", 2, argv[1] ));
  } 
  arg2 = static_cast< float >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Leap::Vector const &","Matrix", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","Matrix", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< Leap::Vector * >(argp3);
  result = (Leap::Matrix *)new Leap::Matrix((Leap::Vector const &)*arg1,arg2,(Leap::Vector const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Matrix(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Matrix__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matrix__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Matrix__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Leap__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Matrix__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Leap__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Matrix__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Leap__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Leap__Vector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Matrix__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Matrix.new", 
    "    Matrix.new()\n"
    "    Matrix.new(Leap::Matrix const &other)\n"
    "    Matrix.new(Leap::Vector const &_xBasis, Leap::Vector const &_yBasis, Leap::Vector const &_zBasis)\n"
    "    Matrix.new(Leap::Vector const &_xBasis, Leap::Vector const &_yBasis, Leap::Vector const &_zBasis, Leap::Vector const &_origin)\n"
    "    Matrix.new(Leap::Vector const &axis, float angleRadians)\n"
    "    Matrix.new(Leap::Vector const &axis, float angleRadians, Leap::Vector const &translation)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_set_rotation(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Vector *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","setRotation", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","setRotation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","setRotation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","setRotation", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->setRotation((Leap::Vector const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_transform_point(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix const *","transformPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","transformPoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","transformPoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = ((Leap::Matrix const *)arg1)->transformPoint((Leap::Vector const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_transform_direction(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix const *","transformDirection", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","transformDirection", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","transformDirection", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = ((Leap::Matrix const *)arg1)->transformDirection((Leap::Vector const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_rigid_inverse(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Matrix result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix const *","rigidInverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  result = ((Leap::Matrix const *)arg1)->rigidInverse();
  vresult = SWIG_NewPointerObj((new Leap::Matrix(static_cast< const Leap::Matrix& >(result))), SWIGTYPE_p_Leap__Matrix, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix___mul__(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Matrix result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Matrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Matrix const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Matrix const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Matrix * >(argp2);
  result = ((Leap::Matrix const *)arg1)->operator *((Leap::Matrix const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Matrix(static_cast< const Leap::Matrix& >(result))), SWIGTYPE_p_Leap__Matrix, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Matrix.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Matrix___eq__(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Matrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Matrix const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Matrix const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Matrix * >(argp2);
  result = (bool)((Leap::Matrix const *)arg1)->operator ==((Leap::Matrix const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  result = ((Leap::Matrix const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_x_basis_set(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Vector *arg2 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","xBasis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector *","xBasis", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  if (arg1) (arg1)->xBasis = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_x_basis_get(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","xBasis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  result = (Leap::Vector *)& ((arg1)->xBasis);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_y_basis_set(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Vector *arg2 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","yBasis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector *","yBasis", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  if (arg1) (arg1)->yBasis = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_y_basis_get(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","yBasis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  result = (Leap::Vector *)& ((arg1)->yBasis);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_z_basis_set(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Vector *arg2 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","zBasis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector *","zBasis", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  if (arg1) (arg1)->zBasis = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_z_basis_get(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","zBasis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  result = (Leap::Vector *)& ((arg1)->zBasis);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_origin_set(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  Leap::Vector *arg2 = (Leap::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Leap__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector *","origin", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  if (arg1) (arg1)->origin = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_origin_get(int argc, VALUE *argv, VALUE self) {
  Leap::Matrix *arg1 = (Leap::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Matrix *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Matrix * >(argp1);
  result = (Leap::Vector *)& ((arg1)->origin);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_identity_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Matrix::identity()), SWIGTYPE_p_Leap__Matrix,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Matrix(Leap::Matrix *arg1) {
    delete arg1;
}

static swig_class SwigClassInterface;

static swig_class SwigClassPointable;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Pointable_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Pointable_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Pointable);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Pointable(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Pointable";
  Leap::Pointable *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Pointable *)new Leap::Pointable();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Pointable.==

  call-seq:
    ==(arg2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Pointable___eq__(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  Leap::Pointable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Pointable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Pointable const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Pointable const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Pointable * >(argp2);
  result = (bool)((Leap::Pointable const *)arg1)->operator ==((Leap::Pointable const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = ((Leap::Pointable const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_id_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (int)Leap_Pointable_id_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_hand_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Hand *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","hand", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (Leap::Hand *)Leap_Pointable_hand_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Hand, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_tip_position_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","tipPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (Leap::Vector *)Leap_Pointable_tipPosition_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_tip_velocity_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","tipVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (Leap::Vector *)Leap_Pointable_tipVelocity_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_direction_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","direction", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (Leap::Vector *)Leap_Pointable_direction_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_width_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","width", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (float)Leap_Pointable_width_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Pointable.length

  call-seq:
    length -> float

Size or Length of the Pointable.
*/
SWIGINTERN VALUE
_wrap_Pointable_length_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (float)Leap_Pointable_length_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_is_tool_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","isTool", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (bool)Leap_Pointable_isTool_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_is_finger_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","isFinger", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (bool)Leap_Pointable_isFinger_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_is_valid_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (bool)Leap_Pointable_isValid_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_frame_get(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = (Leap::Pointable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Frame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Pointable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable *","frame", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (Leap::Frame *)Leap_Pointable_frame_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Frame, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointable_invalid_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Pointable::invalid()), SWIGTYPE_p_Leap__Pointable,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Pointable(Leap::Pointable *arg1) {
    delete arg1;
}

static swig_class SwigClassFinger;

SWIGINTERN VALUE
_wrap_new_Finger__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Finger";
  Leap::Finger *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Finger *)new Leap::Finger();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Finger_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Finger_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Finger);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Finger__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Finger";
  Leap::Finger *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Pointable,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable const &","Finger", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Pointable const &","Finger", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (Leap::Finger *)new Leap::Finger((Leap::Pointable const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Finger(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Finger__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Pointable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Finger__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Finger.new", 
    "    Finger.new()\n"
    "    Finger.new(Leap::Pointable const &)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Finger_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Finger *arg1 = (Leap::Finger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Finger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Finger const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Finger * >(argp1);
  result = ((Leap::Finger const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Finger_invalid_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Finger::invalid()), SWIGTYPE_p_Leap__Finger,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Finger(Leap::Finger *arg1) {
    delete arg1;
}

static swig_class SwigClassTool;

SWIGINTERN VALUE
_wrap_new_Tool__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Tool";
  Leap::Tool *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Tool *)new Leap::Tool();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Tool_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Tool_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Tool);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Tool__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Pointable *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Tool";
  Leap::Tool *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Pointable,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Pointable const &","Tool", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Pointable const &","Tool", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Pointable * >(argp1);
  result = (Leap::Tool *)new Leap::Tool((Leap::Pointable const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Tool(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Tool__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Pointable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Tool__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Tool.new", 
    "    Tool.new()\n"
    "    Tool.new(Leap::Pointable const &)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tool_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Tool *arg1 = (Leap::Tool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Tool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Tool const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Tool * >(argp1);
  result = ((Leap::Tool const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tool_invalid_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Tool::invalid()), SWIGTYPE_p_Leap__Tool,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Tool(Leap::Tool *arg1) {
    delete arg1;
}

static swig_class SwigClassHand;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Hand_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Hand_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Hand);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Hand(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Hand";
  Leap::Hand *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Hand *)new Leap::Hand();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_pointable(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Leap::Pointable > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","pointable", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","pointable", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  result = ((Leap::Hand const *)arg1)->pointable(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Pointable(static_cast< const Leap::Pointable& >(result))), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_finger(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Leap::Finger result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","finger", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","finger", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  result = ((Leap::Hand const *)arg1)->finger(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Finger(static_cast< const Leap::Finger& >(result))), SWIGTYPE_p_Leap__Finger, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_tool(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Leap::Tool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","tool", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","tool", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  result = ((Leap::Hand const *)arg1)->tool(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Tool(static_cast< const Leap::Tool& >(result))), SWIGTYPE_p_Leap__Tool, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_translation(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","translation", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","translation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","translation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = ((Leap::Hand const *)arg1)->translation((Leap::Frame const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_translation_probability(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","translationProbability", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","translationProbability", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","translationProbability", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Hand const *)arg1)->translationProbability((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_rotation_axis(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","rotationAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationAxis", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationAxis", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = ((Leap::Hand const *)arg1)->rotationAxis((Leap::Frame const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_rotation_angle__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","rotationAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationAngle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationAngle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Hand const *)arg1)->rotationAngle((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_rotation_angle__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  Leap::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","rotationAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationAngle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationAngle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Leap::Vector const &","rotationAngle", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","rotationAngle", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Leap::Vector * >(argp3);
  result = (float)((Leap::Hand const *)arg1)->rotationAngle((Leap::Frame const &)*arg2,(Leap::Vector const &)*arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Hand_rotation_angle(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Hand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Hand_rotation_angle__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Hand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Leap__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Hand_rotation_angle__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Hand.rotation_angle", 
    "    float Hand.rotation_angle(Leap::Frame const &sinceFrame)\n"
    "    float Hand.rotation_angle(Leap::Frame const &sinceFrame, Leap::Vector const &axis)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_rotation_matrix(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Matrix result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","rotationMatrix", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationMatrix", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationMatrix", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = ((Leap::Hand const *)arg1)->rotationMatrix((Leap::Frame const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Matrix(static_cast< const Leap::Matrix& >(result))), SWIGTYPE_p_Leap__Matrix, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_rotation_probability(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","rotationProbability", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationProbability", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationProbability", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Hand const *)arg1)->rotationProbability((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_scale_factor(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","scaleFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","scaleFactor", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","scaleFactor", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Hand const *)arg1)->scaleFactor((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_scale_probability(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","scaleProbability", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","scaleProbability", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","scaleProbability", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Hand const *)arg1)->scaleProbability((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Hand.==

  call-seq:
    ==(arg2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Hand___eq__(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  Leap::Hand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Hand,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Hand const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Hand const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Hand * >(argp2);
  result = (bool)((Leap::Hand const *)arg1)->operator ==((Leap::Hand const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = ((Leap::Hand const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_id_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (int)Leap_Hand_id_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_pointables_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::PointableList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","pointables", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::PointableList *)Leap_Hand_pointables_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__PointableList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_fingers_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::FingerList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","fingers", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::FingerList *)Leap_Hand_fingers_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__FingerList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_tools_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::ToolList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","tools", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::ToolList *)Leap_Hand_tools_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__ToolList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_palm_position_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","palmPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::Vector *)Leap_Hand_palmPosition_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_palm_velocity_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","palmVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::Vector *)Leap_Hand_palmVelocity_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_palm_normal_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","palmNormal", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::Vector *)Leap_Hand_palmNormal_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_direction_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","direction", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::Vector *)Leap_Hand_direction_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_is_valid_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (bool)Leap_Hand_isValid_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_sphere_center_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","sphereCenter", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::Vector *)Leap_Hand_sphereCenter_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_sphere_radius_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","sphereRadius", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (float)Leap_Hand_sphereRadius_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_frame_get(int argc, VALUE *argv, VALUE self) {
  Leap::Hand *arg1 = (Leap::Hand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Frame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Hand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Hand *","frame", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Hand * >(argp1);
  result = (Leap::Frame *)Leap_Hand_frame_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Frame, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Hand_invalid_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Hand::invalid()), SWIGTYPE_p_Leap__Hand,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Hand(Leap::Hand *arg1) {
    delete arg1;
}

static swig_class SwigClassGesture;

SWIGINTERN VALUE
_wrap_new_Gesture__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Gesture";
  Leap::Gesture *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Gesture *)new Leap::Gesture();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Gesture_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Gesture_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Gesture);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Gesture__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Gesture";
  Leap::Gesture *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Gesture,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture const &","Gesture", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Gesture const &","Gesture", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::Gesture *)new Leap::Gesture((Leap::Gesture const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Gesture(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Gesture__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Gesture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Gesture__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Gesture.new", 
    "    Gesture.new()\n"
    "    Gesture.new(Leap::Gesture const &rhs)\n");
  
  return Qnil;
}



/*
  Document-method: Leap::Motion::Gesture.==

  call-seq:
    ==(rhs) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Gesture___eq__(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  Leap::Gesture *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Gesture,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Gesture const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Gesture const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Gesture * >(argp2);
  result = (bool)((Leap::Gesture const *)arg1)->operator ==((Leap::Gesture const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = ((Leap::Gesture const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_type_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Gesture::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::Gesture::Type)Leap_Gesture_type_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_state_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Gesture::State result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","state", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::Gesture::State)Leap_Gesture_state_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_id_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (int32_t)Leap_Gesture_id_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_duration_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","duration", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (int64_t)Leap_Gesture_duration_get(arg1);
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_duration_seconds_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","durationSeconds", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (float)Leap_Gesture_durationSeconds_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_frame_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Frame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","frame", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::Frame *)Leap_Gesture_frame_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Frame, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_hands_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::HandList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","hands", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::HandList *)Leap_Gesture_hands_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__HandList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_pointables_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::PointableList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","pointables", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::PointableList *)Leap_Gesture_pointables_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__PointableList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_is_valid_get(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = (Leap::Gesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Gesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (bool)Leap_Gesture_isValid_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Gesture_invalid_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Gesture::invalid()), SWIGTYPE_p_Leap__Gesture,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Gesture(Leap::Gesture *arg1) {
    delete arg1;
}

static swig_class SwigClassSwipeGesture;

SWIGINTERN VALUE
_wrap_SwipeGesture_class_type(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Gesture::Type)Leap::SwipeGesture::classType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_SwipeGesture__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::SwipeGesture";
  Leap::SwipeGesture *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::SwipeGesture *)new Leap::SwipeGesture();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_SwipeGesture_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_SwipeGesture_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__SwipeGesture);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_SwipeGesture__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::SwipeGesture";
  Leap::SwipeGesture *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Gesture,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture const &","SwipeGesture", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Gesture const &","SwipeGesture", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::SwipeGesture *)new Leap::SwipeGesture((Leap::Gesture const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_SwipeGesture(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_SwipeGesture__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Gesture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SwipeGesture__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "SwipeGesture.new", 
    "    SwipeGesture.new()\n"
    "    SwipeGesture.new(Leap::Gesture const &rhs)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SwipeGesture_start_position_get(int argc, VALUE *argv, VALUE self) {
  Leap::SwipeGesture *arg1 = (Leap::SwipeGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__SwipeGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::SwipeGesture *","startPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::SwipeGesture * >(argp1);
  result = (Leap::Vector *)Leap_SwipeGesture_startPosition_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SwipeGesture_position_get(int argc, VALUE *argv, VALUE self) {
  Leap::SwipeGesture *arg1 = (Leap::SwipeGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__SwipeGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::SwipeGesture *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::SwipeGesture * >(argp1);
  result = (Leap::Vector *)Leap_SwipeGesture_position_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SwipeGesture_direction_get(int argc, VALUE *argv, VALUE self) {
  Leap::SwipeGesture *arg1 = (Leap::SwipeGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__SwipeGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::SwipeGesture *","direction", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::SwipeGesture * >(argp1);
  result = (Leap::Vector *)Leap_SwipeGesture_direction_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SwipeGesture_speed_get(int argc, VALUE *argv, VALUE self) {
  Leap::SwipeGesture *arg1 = (Leap::SwipeGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__SwipeGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::SwipeGesture *","speed", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::SwipeGesture * >(argp1);
  result = (float)Leap_SwipeGesture_speed_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SwipeGesture_pointable_get(int argc, VALUE *argv, VALUE self) {
  Leap::SwipeGesture *arg1 = (Leap::SwipeGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Pointable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__SwipeGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::SwipeGesture *","pointable", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::SwipeGesture * >(argp1);
  result = (Leap::Pointable *)Leap_SwipeGesture_pointable_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_SwipeGesture(Leap::SwipeGesture *arg1) {
    delete arg1;
}

static swig_class SwigClassCircleGesture;

SWIGINTERN VALUE
_wrap_CircleGesture_class_type(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Gesture::Type)Leap::CircleGesture::classType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CircleGesture__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::CircleGesture";
  Leap::CircleGesture *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::CircleGesture *)new Leap::CircleGesture();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CircleGesture_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CircleGesture_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__CircleGesture);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CircleGesture__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::CircleGesture";
  Leap::CircleGesture *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Gesture,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture const &","CircleGesture", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Gesture const &","CircleGesture", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::CircleGesture *)new Leap::CircleGesture((Leap::Gesture const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CircleGesture(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CircleGesture__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Gesture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CircleGesture__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CircleGesture.new", 
    "    CircleGesture.new()\n"
    "    CircleGesture.new(Leap::Gesture const &rhs)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CircleGesture_center_get(int argc, VALUE *argv, VALUE self) {
  Leap::CircleGesture *arg1 = (Leap::CircleGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__CircleGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::CircleGesture *","center", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::CircleGesture * >(argp1);
  result = (Leap::Vector *)Leap_CircleGesture_center_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CircleGesture_normal_get(int argc, VALUE *argv, VALUE self) {
  Leap::CircleGesture *arg1 = (Leap::CircleGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__CircleGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::CircleGesture *","normal", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::CircleGesture * >(argp1);
  result = (Leap::Vector *)Leap_CircleGesture_normal_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CircleGesture_progress_get(int argc, VALUE *argv, VALUE self) {
  Leap::CircleGesture *arg1 = (Leap::CircleGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__CircleGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::CircleGesture *","progress", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::CircleGesture * >(argp1);
  result = (float)Leap_CircleGesture_progress_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CircleGesture_radius_get(int argc, VALUE *argv, VALUE self) {
  Leap::CircleGesture *arg1 = (Leap::CircleGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__CircleGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::CircleGesture *","radius", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::CircleGesture * >(argp1);
  result = (float)Leap_CircleGesture_radius_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CircleGesture_pointable_get(int argc, VALUE *argv, VALUE self) {
  Leap::CircleGesture *arg1 = (Leap::CircleGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Pointable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__CircleGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::CircleGesture *","pointable", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::CircleGesture * >(argp1);
  result = (Leap::Pointable *)Leap_CircleGesture_pointable_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_CircleGesture(Leap::CircleGesture *arg1) {
    delete arg1;
}

static swig_class SwigClassScreenTapGesture;

SWIGINTERN VALUE
_wrap_ScreenTapGesture_class_type(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Gesture::Type)Leap::ScreenTapGesture::classType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ScreenTapGesture__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::ScreenTapGesture";
  Leap::ScreenTapGesture *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::ScreenTapGesture *)new Leap::ScreenTapGesture();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ScreenTapGesture_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ScreenTapGesture_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__ScreenTapGesture);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ScreenTapGesture__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::ScreenTapGesture";
  Leap::ScreenTapGesture *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Gesture,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture const &","ScreenTapGesture", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Gesture const &","ScreenTapGesture", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::ScreenTapGesture *)new Leap::ScreenTapGesture((Leap::Gesture const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ScreenTapGesture(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ScreenTapGesture__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Gesture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScreenTapGesture__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ScreenTapGesture.new", 
    "    ScreenTapGesture.new()\n"
    "    ScreenTapGesture.new(Leap::Gesture const &rhs)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenTapGesture_position_get(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenTapGesture *arg1 = (Leap::ScreenTapGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenTapGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenTapGesture *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenTapGesture * >(argp1);
  result = (Leap::Vector *)Leap_ScreenTapGesture_position_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenTapGesture_direction_get(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenTapGesture *arg1 = (Leap::ScreenTapGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenTapGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenTapGesture *","direction", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenTapGesture * >(argp1);
  result = (Leap::Vector *)Leap_ScreenTapGesture_direction_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenTapGesture_progress_get(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenTapGesture *arg1 = (Leap::ScreenTapGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenTapGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenTapGesture *","progress", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenTapGesture * >(argp1);
  result = (float)Leap_ScreenTapGesture_progress_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenTapGesture_pointable_get(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenTapGesture *arg1 = (Leap::ScreenTapGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Pointable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenTapGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenTapGesture *","pointable", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenTapGesture * >(argp1);
  result = (Leap::Pointable *)Leap_ScreenTapGesture_pointable_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_ScreenTapGesture(Leap::ScreenTapGesture *arg1) {
    delete arg1;
}

static swig_class SwigClassKeyTapGesture;

SWIGINTERN VALUE
_wrap_KeyTapGesture_class_type(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Gesture::Type)Leap::KeyTapGesture::classType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_KeyTapGesture__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::KeyTapGesture";
  Leap::KeyTapGesture *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::KeyTapGesture *)new Leap::KeyTapGesture();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_KeyTapGesture_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_KeyTapGesture_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__KeyTapGesture);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_KeyTapGesture__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Gesture *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::KeyTapGesture";
  Leap::KeyTapGesture *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Gesture,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Gesture const &","KeyTapGesture", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Gesture const &","KeyTapGesture", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Gesture * >(argp1);
  result = (Leap::KeyTapGesture *)new Leap::KeyTapGesture((Leap::Gesture const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_KeyTapGesture(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_KeyTapGesture__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Gesture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KeyTapGesture__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "KeyTapGesture.new", 
    "    KeyTapGesture.new()\n"
    "    KeyTapGesture.new(Leap::Gesture const &rhs)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyTapGesture_position_get(int argc, VALUE *argv, VALUE self) {
  Leap::KeyTapGesture *arg1 = (Leap::KeyTapGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__KeyTapGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::KeyTapGesture *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::KeyTapGesture * >(argp1);
  result = (Leap::Vector *)Leap_KeyTapGesture_position_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyTapGesture_direction_get(int argc, VALUE *argv, VALUE self) {
  Leap::KeyTapGesture *arg1 = (Leap::KeyTapGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__KeyTapGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::KeyTapGesture *","direction", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::KeyTapGesture * >(argp1);
  result = (Leap::Vector *)Leap_KeyTapGesture_direction_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyTapGesture_progress_get(int argc, VALUE *argv, VALUE self) {
  Leap::KeyTapGesture *arg1 = (Leap::KeyTapGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__KeyTapGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::KeyTapGesture *","progress", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::KeyTapGesture * >(argp1);
  result = (float)Leap_KeyTapGesture_progress_get(arg1);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_KeyTapGesture_pointable_get(int argc, VALUE *argv, VALUE self) {
  Leap::KeyTapGesture *arg1 = (Leap::KeyTapGesture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Pointable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__KeyTapGesture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::KeyTapGesture *","pointable", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::KeyTapGesture * >(argp1);
  result = (Leap::Pointable *)Leap_KeyTapGesture_pointable_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_KeyTapGesture(Leap::KeyTapGesture *arg1) {
    delete arg1;
}

static swig_class SwigClassScreen;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Screen_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Screen_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Screen);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Screen(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Screen";
  Leap::Screen *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Screen *)new Leap::Screen();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_intersect__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  Leap::Pointable *arg2 = 0 ;
  bool arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","intersect", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Pointable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Pointable const &","intersect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Pointable const &","intersect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Pointable * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","intersect", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","intersect", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  result = ((Leap::Screen const *)arg1)->intersect((Leap::Pointable const &)*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_intersect__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  Leap::Pointable *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","intersect", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Pointable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Pointable const &","intersect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Pointable const &","intersect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Pointable * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","intersect", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = ((Leap::Screen const *)arg1)->intersect((Leap::Pointable const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_intersect__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  Leap::Vector *arg2 = 0 ;
  Leap::Vector *arg3 = 0 ;
  bool arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","intersect", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","intersect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","intersect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Leap::Vector const &","intersect", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","intersect", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Leap::Vector * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","intersect", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "float","intersect", 5, argv[3] ));
  } 
  arg5 = static_cast< float >(val5);
  result = ((Leap::Screen const *)arg1)->intersect((Leap::Vector const &)*arg2,(Leap::Vector const &)*arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_intersect__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  Leap::Vector *arg2 = 0 ;
  Leap::Vector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","intersect", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","intersect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","intersect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Leap::Vector const &","intersect", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","intersect", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Leap::Vector * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","intersect", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  result = ((Leap::Screen const *)arg1)->intersect((Leap::Vector const &)*arg2,(Leap::Vector const &)*arg3,arg4);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Screen_intersect(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Screen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Pointable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Screen_intersect__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Screen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Pointable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Screen_intersect__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Screen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Leap__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Screen_intersect__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Screen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Leap__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Screen_intersect__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Screen.intersect", 
    "    Leap::Vector Screen.intersect(Leap::Pointable const &pointable, bool normalize, float clampRatio)\n"
    "    Leap::Vector Screen.intersect(Leap::Pointable const &pointable, bool normalize)\n"
    "    Leap::Vector Screen.intersect(Leap::Vector const &position, Leap::Vector const &direction, bool normalize, float clampRatio)\n"
    "    Leap::Vector Screen.intersect(Leap::Vector const &position, Leap::Vector const &direction, bool normalize)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_project__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  Leap::Vector *arg2 = 0 ;
  bool arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","project", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","project", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","project", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","project", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","project", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  result = ((Leap::Screen const *)arg1)->project((Leap::Vector const &)*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_project__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  Leap::Vector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","project", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","project", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","project", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","project", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = ((Leap::Screen const *)arg1)->project((Leap::Vector const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Screen_project(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Screen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Screen_project__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Screen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Screen_project__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Screen.project", 
    "    Leap::Vector Screen.project(Leap::Vector const &position, bool normalize, float clampRatio)\n"
    "    Leap::Vector Screen.project(Leap::Vector const &position, bool normalize)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_normal(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","normal", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = ((Leap::Screen const *)arg1)->normal();
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_distance_to_point(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","distanceToPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","distanceToPoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","distanceToPoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = (float)((Leap::Screen const *)arg1)->distanceToPoint((Leap::Vector const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Screen.==

  call-seq:
    ==(arg2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Screen___eq__(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  Leap::Screen *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Screen,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Screen const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Screen const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Screen * >(argp2);
  result = (bool)((Leap::Screen const *)arg1)->operator ==((Leap::Screen const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = ((Leap::Screen const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_id_get(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = (int32_t)Leap_Screen_id_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_horizontal_axis_get(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen *","horizontalAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = (Leap::Vector *)Leap_Screen_horizontalAxis_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_vertical_axis_get(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen *","verticalAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = (Leap::Vector *)Leap_Screen_verticalAxis_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_bottom_left_corner_get(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Vector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen *","bottomLeftCorner", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = (Leap::Vector *)Leap_Screen_bottomLeftCorner_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_width_pixels_get(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen *","widthPixels", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = (int)Leap_Screen_widthPixels_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_height_pixels_get(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen *","heightPixels", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = (int)Leap_Screen_heightPixels_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_is_valid_get(int argc, VALUE *argv, VALUE self) {
  Leap::Screen *arg1 = (Leap::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Screen *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Screen * >(argp1);
  result = (bool)Leap_Screen_isValid_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Screen_invalid_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Screen::invalid()), SWIGTYPE_p_Leap__Screen,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Screen(Leap::Screen *arg1) {
    delete arg1;
}

static swig_class SwigClassPointableList;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_PointableList_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_PointableList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__PointableList);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_PointableList(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::PointableList";
  Leap::PointableList *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::PointableList *)new Leap::PointableList();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointableList_count(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList const *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  result = (int)((Leap::PointableList const *)arg1)->count();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointableList_append__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  Leap::PointableList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::PointableList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList *","append", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__PointableList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::PointableList const &","append", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::PointableList const &","append", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::PointableList * >(argp2);
  result = (Leap::PointableList *) &(arg1)->append((Leap::PointableList const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointableList_append__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  Leap::FingerList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::PointableList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList *","append", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__FingerList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::FingerList const &","append", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::FingerList const &","append", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::FingerList * >(argp2);
  result = (Leap::PointableList *) &(arg1)->append((Leap::FingerList const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointableList_append__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  Leap::ToolList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::PointableList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList *","append", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__ToolList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::ToolList const &","append", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::ToolList const &","append", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::ToolList * >(argp2);
  result = (Leap::PointableList *) &(arg1)->append((Leap::ToolList const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PointableList_append(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__PointableList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__PointableList, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PointableList_append__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__PointableList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__FingerList, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PointableList_append__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__PointableList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__ToolList, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PointableList_append__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "PointableList.append", 
    "    Leap::PointableList & PointableList.append(Leap::PointableList const &other)\n"
    "    Leap::PointableList & PointableList.append(Leap::FingerList const &other)\n"
    "    Leap::PointableList & PointableList.append(Leap::ToolList const &other)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointableList_is_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  result = (bool)Leap_PointableList_isEmpty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::PointableList.empty

  call-seq:
    empty -> bool

Check if the PointableList is empty or not.
*/
SWIGINTERN VALUE
_wrap_PointableList_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  result = (bool)Leap_PointableList_empty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointableList_leftmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Pointable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList *","leftmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  result = (Leap::Pointable *)Leap_PointableList_leftmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointableList_rightmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Pointable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList *","rightmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  result = (Leap::Pointable *)Leap_PointableList_rightmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointableList_frontmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::PointableList *arg1 = (Leap::PointableList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Pointable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__PointableList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::PointableList *","frontmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::PointableList * >(argp1);
  result = (Leap::Pointable *)Leap_PointableList_frontmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_PointableList(Leap::PointableList *arg1) {
    delete arg1;
}

static swig_class SwigClassFingerList;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_FingerList_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_FingerList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__FingerList);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_FingerList(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::FingerList";
  Leap::FingerList *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::FingerList *)new Leap::FingerList();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FingerList_count(int argc, VALUE *argv, VALUE self) {
  Leap::FingerList *arg1 = (Leap::FingerList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__FingerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::FingerList const *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::FingerList * >(argp1);
  result = (int)((Leap::FingerList const *)arg1)->count();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FingerList_append(int argc, VALUE *argv, VALUE self) {
  Leap::FingerList *arg1 = (Leap::FingerList *) 0 ;
  Leap::FingerList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::FingerList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__FingerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::FingerList *","append", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::FingerList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__FingerList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::FingerList const &","append", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::FingerList const &","append", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::FingerList * >(argp2);
  result = (Leap::FingerList *) &(arg1)->append((Leap::FingerList const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__FingerList, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FingerList_is_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::FingerList *arg1 = (Leap::FingerList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__FingerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::FingerList *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::FingerList * >(argp1);
  result = (bool)Leap_FingerList_isEmpty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::FingerList.empty

  call-seq:
    empty -> bool

Check if the FingerList is empty or not.
*/
SWIGINTERN VALUE
_wrap_FingerList_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::FingerList *arg1 = (Leap::FingerList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__FingerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::FingerList *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::FingerList * >(argp1);
  result = (bool)Leap_FingerList_empty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FingerList_leftmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::FingerList *arg1 = (Leap::FingerList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Finger *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__FingerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::FingerList *","leftmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::FingerList * >(argp1);
  result = (Leap::Finger *)Leap_FingerList_leftmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Finger, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FingerList_rightmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::FingerList *arg1 = (Leap::FingerList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Finger *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__FingerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::FingerList *","rightmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::FingerList * >(argp1);
  result = (Leap::Finger *)Leap_FingerList_rightmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Finger, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FingerList_frontmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::FingerList *arg1 = (Leap::FingerList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Finger *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__FingerList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::FingerList *","frontmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::FingerList * >(argp1);
  result = (Leap::Finger *)Leap_FingerList_frontmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Finger, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_FingerList(Leap::FingerList *arg1) {
    delete arg1;
}

static swig_class SwigClassToolList;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ToolList_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ToolList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__ToolList);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ToolList(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::ToolList";
  Leap::ToolList *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::ToolList *)new Leap::ToolList();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ToolList_count(int argc, VALUE *argv, VALUE self) {
  Leap::ToolList *arg1 = (Leap::ToolList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ToolList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ToolList const *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ToolList * >(argp1);
  result = (int)((Leap::ToolList const *)arg1)->count();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ToolList_append(int argc, VALUE *argv, VALUE self) {
  Leap::ToolList *arg1 = (Leap::ToolList *) 0 ;
  Leap::ToolList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::ToolList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ToolList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ToolList *","append", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ToolList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__ToolList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::ToolList const &","append", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::ToolList const &","append", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::ToolList * >(argp2);
  result = (Leap::ToolList *) &(arg1)->append((Leap::ToolList const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__ToolList, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ToolList_is_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::ToolList *arg1 = (Leap::ToolList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ToolList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ToolList *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ToolList * >(argp1);
  result = (bool)Leap_ToolList_isEmpty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::ToolList.empty

  call-seq:
    empty -> bool

Check if the ToolList is empty or not.
*/
SWIGINTERN VALUE
_wrap_ToolList_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::ToolList *arg1 = (Leap::ToolList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ToolList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ToolList *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ToolList * >(argp1);
  result = (bool)Leap_ToolList_empty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ToolList_leftmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::ToolList *arg1 = (Leap::ToolList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Tool *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ToolList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ToolList *","leftmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ToolList * >(argp1);
  result = (Leap::Tool *)Leap_ToolList_leftmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Tool, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ToolList_rightmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::ToolList *arg1 = (Leap::ToolList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Tool *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ToolList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ToolList *","rightmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ToolList * >(argp1);
  result = (Leap::Tool *)Leap_ToolList_rightmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Tool, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ToolList_frontmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::ToolList *arg1 = (Leap::ToolList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Tool *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ToolList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ToolList *","frontmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ToolList * >(argp1);
  result = (Leap::Tool *)Leap_ToolList_frontmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Tool, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_ToolList(Leap::ToolList *arg1) {
    delete arg1;
}

static swig_class SwigClassHandList;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_HandList_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_HandList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__HandList);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_HandList(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::HandList";
  Leap::HandList *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::HandList *)new Leap::HandList();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HandList_count(int argc, VALUE *argv, VALUE self) {
  Leap::HandList *arg1 = (Leap::HandList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__HandList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::HandList const *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::HandList * >(argp1);
  result = (int)((Leap::HandList const *)arg1)->count();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HandList_append(int argc, VALUE *argv, VALUE self) {
  Leap::HandList *arg1 = (Leap::HandList *) 0 ;
  Leap::HandList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::HandList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__HandList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::HandList *","append", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::HandList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__HandList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::HandList const &","append", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::HandList const &","append", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::HandList * >(argp2);
  result = (Leap::HandList *) &(arg1)->append((Leap::HandList const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__HandList, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HandList_is_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::HandList *arg1 = (Leap::HandList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__HandList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::HandList *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::HandList * >(argp1);
  result = (bool)Leap_HandList_isEmpty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::HandList.empty

  call-seq:
    empty -> bool

Check if the HandList is empty or not.
*/
SWIGINTERN VALUE
_wrap_HandList_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::HandList *arg1 = (Leap::HandList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__HandList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::HandList *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::HandList * >(argp1);
  result = (bool)Leap_HandList_empty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HandList_leftmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::HandList *arg1 = (Leap::HandList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Hand *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__HandList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::HandList *","leftmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::HandList * >(argp1);
  result = (Leap::Hand *)Leap_HandList_leftmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Hand, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HandList_rightmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::HandList *arg1 = (Leap::HandList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Hand *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__HandList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::HandList *","rightmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::HandList * >(argp1);
  result = (Leap::Hand *)Leap_HandList_rightmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Hand, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HandList_frontmost_get(int argc, VALUE *argv, VALUE self) {
  Leap::HandList *arg1 = (Leap::HandList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Hand *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__HandList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::HandList *","frontmost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::HandList * >(argp1);
  result = (Leap::Hand *)Leap_HandList_frontmost_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Hand, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_HandList(Leap::HandList *arg1) {
    delete arg1;
}

static swig_class SwigClassGestureList;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_GestureList_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_GestureList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__GestureList);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_GestureList(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::GestureList";
  Leap::GestureList *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::GestureList *)new Leap::GestureList();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GestureList_count(int argc, VALUE *argv, VALUE self) {
  Leap::GestureList *arg1 = (Leap::GestureList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__GestureList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::GestureList const *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::GestureList * >(argp1);
  result = (int)((Leap::GestureList const *)arg1)->count();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GestureList_append(int argc, VALUE *argv, VALUE self) {
  Leap::GestureList *arg1 = (Leap::GestureList *) 0 ;
  Leap::GestureList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::GestureList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__GestureList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::GestureList *","append", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::GestureList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__GestureList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::GestureList const &","append", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::GestureList const &","append", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::GestureList * >(argp2);
  result = (Leap::GestureList *) &(arg1)->append((Leap::GestureList const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__GestureList, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GestureList_is_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::GestureList *arg1 = (Leap::GestureList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__GestureList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::GestureList *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::GestureList * >(argp1);
  result = (bool)Leap_GestureList_isEmpty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::GestureList.empty

  call-seq:
    empty -> bool

Check if the GestureList is empty or not.
*/
SWIGINTERN VALUE
_wrap_GestureList_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::GestureList *arg1 = (Leap::GestureList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__GestureList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::GestureList *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::GestureList * >(argp1);
  result = (bool)Leap_GestureList_empty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_GestureList(Leap::GestureList *arg1) {
    delete arg1;
}

static swig_class SwigClassScreenList;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ScreenList_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ScreenList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__ScreenList);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ScreenList(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::ScreenList";
  Leap::ScreenList *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::ScreenList *)new Leap::ScreenList();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenList_count(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenList *arg1 = (Leap::ScreenList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenList const *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenList * >(argp1);
  result = (int)((Leap::ScreenList const *)arg1)->count();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenList_closest_screen_hit__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenList *arg1 = (Leap::ScreenList *) 0 ;
  Leap::Pointable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Leap::Screen > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenList const *","closestScreenHit", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Pointable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Pointable const &","closestScreenHit", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Pointable const &","closestScreenHit", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Pointable * >(argp2);
  result = ((Leap::ScreenList const *)arg1)->closestScreenHit((Leap::Pointable const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Screen(static_cast< const Leap::Screen& >(result))), SWIGTYPE_p_Leap__Screen, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenList_closest_screen_hit__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenList *arg1 = (Leap::ScreenList *) 0 ;
  Leap::Vector *arg2 = 0 ;
  Leap::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< Leap::Screen > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenList const *","closestScreenHit", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","closestScreenHit", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","closestScreenHit", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Leap::Vector const &","closestScreenHit", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","closestScreenHit", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Leap::Vector * >(argp3);
  result = ((Leap::ScreenList const *)arg1)->closestScreenHit((Leap::Vector const &)*arg2,(Leap::Vector const &)*arg3);
  vresult = SWIG_NewPointerObj((new Leap::Screen(static_cast< const Leap::Screen& >(result))), SWIGTYPE_p_Leap__Screen, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ScreenList_closest_screen_hit(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__ScreenList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Pointable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScreenList_closest_screen_hit__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__ScreenList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Leap__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ScreenList_closest_screen_hit__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ScreenList.closest_screen_hit", 
    "    Leap::Screen ScreenList.closest_screen_hit(Leap::Pointable const &pointable)\n"
    "    Leap::Screen ScreenList.closest_screen_hit(Leap::Vector const &position, Leap::Vector const &direction)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenList_closest_screen(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenList *arg1 = (Leap::ScreenList *) 0 ;
  Leap::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Leap::Screen > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenList const *","closestScreen", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Vector const &","closestScreen", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","closestScreen", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Vector * >(argp2);
  result = ((Leap::ScreenList const *)arg1)->closestScreen((Leap::Vector const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Screen(static_cast< const Leap::Screen& >(result))), SWIGTYPE_p_Leap__Screen, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ScreenList_is_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenList *arg1 = (Leap::ScreenList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenList *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenList * >(argp1);
  result = (bool)Leap_ScreenList_isEmpty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::ScreenList.empty

  call-seq:
    empty -> bool

Check if the ScreenList is empty or not.
*/
SWIGINTERN VALUE
_wrap_ScreenList_empty_get(int argc, VALUE *argv, VALUE self) {
  Leap::ScreenList *arg1 = (Leap::ScreenList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__ScreenList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::ScreenList *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::ScreenList * >(argp1);
  result = (bool)Leap_ScreenList_empty_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_ScreenList(Leap::ScreenList *arg1) {
    delete arg1;
}

static swig_class SwigClassFrame;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Frame_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Frame_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Frame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Frame(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Frame";
  Leap::Frame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Frame *)new Leap::Frame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_hand(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Leap::Hand > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","hand", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","hand", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  result = ((Leap::Frame const *)arg1)->hand(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Hand(static_cast< const Leap::Hand& >(result))), SWIGTYPE_p_Leap__Hand, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_pointable(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Leap::Pointable > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","pointable", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","pointable", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  result = ((Leap::Frame const *)arg1)->pointable(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Pointable(static_cast< const Leap::Pointable& >(result))), SWIGTYPE_p_Leap__Pointable, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_finger(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Leap::Finger result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","finger", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","finger", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  result = ((Leap::Frame const *)arg1)->finger(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Finger(static_cast< const Leap::Finger& >(result))), SWIGTYPE_p_Leap__Finger, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_tool(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Leap::Tool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","tool", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","tool", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  result = ((Leap::Frame const *)arg1)->tool(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Tool(static_cast< const Leap::Tool& >(result))), SWIGTYPE_p_Leap__Tool, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_gesture(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Leap::Gesture > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","gesture", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","gesture", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  result = ((Leap::Frame const *)arg1)->gesture(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Gesture(static_cast< const Leap::Gesture& >(result))), SWIGTYPE_p_Leap__Gesture, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_gestures__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Leap::GestureList > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","gestures", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = ((Leap::Frame const *)arg1)->gestures();
  vresult = SWIG_NewPointerObj((new Leap::GestureList(static_cast< const Leap::GestureList& >(result))), SWIGTYPE_p_Leap__GestureList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_gestures__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Leap::GestureList > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","gestures", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","gestures", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","gestures", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = ((Leap::Frame const *)arg1)->gestures((Leap::Frame const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::GestureList(static_cast< const Leap::GestureList& >(result))), SWIGTYPE_p_Leap__GestureList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Frame_gestures(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Frame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Frame_gestures__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Frame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Frame_gestures__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Frame.gestures", 
    "    Leap::GestureList Frame.gestures()\n"
    "    Leap::GestureList Frame.gestures(Leap::Frame const &sinceFrame)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_translation(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","translation", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","translation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","translation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = ((Leap::Frame const *)arg1)->translation((Leap::Frame const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_translation_probability(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","translationProbability", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","translationProbability", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","translationProbability", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Frame const *)arg1)->translationProbability((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_rotation_axis(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Vector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","rotationAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationAxis", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationAxis", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = ((Leap::Frame const *)arg1)->rotationAxis((Leap::Frame const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Vector(static_cast< const Leap::Vector& >(result))), SWIGTYPE_p_Leap__Vector, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_rotation_angle__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","rotationAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationAngle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationAngle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Frame const *)arg1)->rotationAngle((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_rotation_angle__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  Leap::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","rotationAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationAngle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationAngle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Leap__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Leap::Vector const &","rotationAngle", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Vector const &","rotationAngle", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Leap::Vector * >(argp3);
  result = (float)((Leap::Frame const *)arg1)->rotationAngle((Leap::Frame const &)*arg2,(Leap::Vector const &)*arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Frame_rotation_angle(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Frame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Frame_rotation_angle__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Frame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Leap__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Leap__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Frame_rotation_angle__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Frame.rotation_angle", 
    "    float Frame.rotation_angle(Leap::Frame const &sinceFrame)\n"
    "    float Frame.rotation_angle(Leap::Frame const &sinceFrame, Leap::Vector const &axis)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_rotation_matrix(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Leap::Matrix result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","rotationMatrix", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationMatrix", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationMatrix", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = ((Leap::Frame const *)arg1)->rotationMatrix((Leap::Frame const &)*arg2);
  vresult = SWIG_NewPointerObj((new Leap::Matrix(static_cast< const Leap::Matrix& >(result))), SWIGTYPE_p_Leap__Matrix, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_rotation_probability(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","rotationProbability", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","rotationProbability", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","rotationProbability", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Frame const *)arg1)->rotationProbability((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_scale_factor(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","scaleFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","scaleFactor", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","scaleFactor", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Frame const *)arg1)->scaleFactor((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_scale_probability(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","scaleProbability", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","scaleProbability", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","scaleProbability", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (float)((Leap::Frame const *)arg1)->scaleProbability((Leap::Frame const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Leap::Motion::Frame.==

  call-seq:
    ==(arg2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Frame___eq__(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  Leap::Frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Frame const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Frame const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Frame * >(argp2);
  result = (bool)((Leap::Frame const *)arg1)->operator ==((Leap::Frame const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_to_s(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = ((Leap::Frame const *)arg1)->toString();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_id_get(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame *","id", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = (int64_t)Leap_Frame_id_get(arg1);
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_timestamp_get(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame *","timestamp", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = (int64_t)Leap_Frame_timestamp_get(arg1);
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_pointables_get(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::PointableList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame *","pointables", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = (Leap::PointableList *)Leap_Frame_pointables_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__PointableList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_fingers_get(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::FingerList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame *","fingers", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = (Leap::FingerList *)Leap_Frame_fingers_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__FingerList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_tools_get(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::ToolList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame *","tools", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = (Leap::ToolList *)Leap_Frame_tools_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__ToolList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_hands_get(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::HandList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame *","hands", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = (Leap::HandList *)Leap_Frame_hands_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__HandList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_is_valid_get(int argc, VALUE *argv, VALUE self) {
  Leap::Frame *arg1 = (Leap::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Frame *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Frame * >(argp1);
  result = (bool)Leap_Frame_isValid_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_invalid_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&Leap::Frame::invalid()), SWIGTYPE_p_Leap__Frame,  0 );
  return _val;
}


SWIGINTERN void
free_Leap_Frame(Leap::Frame *arg1) {
    delete arg1;
}

static swig_class SwigClassConfig;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Config_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Config_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Config);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Config(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Config";
  Leap::Config *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Config *)new Leap::Config();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_type(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Leap::Config::ValueType result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config const *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","type", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","type", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (Leap::Config::ValueType)((Leap::Config const *)arg1)->type((std::string const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_get_bool(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config const *","getBool", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","getBool", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","getBool", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)((Leap::Config const *)arg1)->getBool((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_set_bool(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config *","setBool", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","setBool", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","setBool", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","setBool", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->setBool((std::string const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_get_int_32(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config const *","getInt32", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","getInt32", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","getInt32", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (int32_t)((Leap::Config const *)arg1)->getInt32((std::string const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_set_int_32(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config *","setInt32", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","setInt32", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","setInt32", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32_t","setInt32", 3, argv[1] ));
  } 
  arg3 = static_cast< int32_t >(val3);
  result = (bool)(arg1)->setInt32((std::string const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_get_float(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config const *","getFloat", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","getFloat", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","getFloat", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (float)((Leap::Config const *)arg1)->getFloat((std::string const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_set_float(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config *","setFloat", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","setFloat", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","setFloat", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","setFloat", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  result = (bool)(arg1)->setFloat((std::string const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_get_string(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config const *","getString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","getString", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","getString", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = ((Leap::Config const *)arg1)->getString((std::string const &)*arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_set_string(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config *","setString", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","setString", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","setString", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::string const &","setString", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","setString", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->setString((std::string const &)*arg2,(std::string const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_save(int argc, VALUE *argv, VALUE self) {
  Leap::Config *arg1 = (Leap::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Config *","save", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Config * >(argp1);
  result = (bool)(arg1)->save();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_Config(Leap::Config *arg1) {
    delete arg1;
}

static swig_class SwigClassController;

SWIGINTERN VALUE
_wrap_new_Controller__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Leap::Motion::Controller";
  Leap::Controller *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Leap::Controller *)new Leap::Controller();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_Controller(Leap::Controller *arg1) {
    delete arg1;
}

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Controller_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Controller_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Controller);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Controller__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Controller";
  Leap::Controller *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Leap__Listener,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener &","Controller", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Listener &","Controller", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  result = (Leap::Controller *)new Leap::Controller(*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Controller(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Controller__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Listener, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Controller__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Controller.new", 
    "    Controller.new()\n"
    "    Controller.new(Leap::Listener &listener)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_set_policy_flags(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  Leap::Controller::PolicyFlag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller const *","setPolicyFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Leap::Controller::PolicyFlag","setPolicyFlags", 2, argv[0] ));
  } 
  arg2 = static_cast< Leap::Controller::PolicyFlag >(val2);
  ((Leap::Controller const *)arg1)->setPolicyFlags(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_add_listener(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  Leap::Listener *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller *","addListener", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Listener,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Listener &","addListener", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Listener &","addListener", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Listener * >(argp2);
  result = (bool)(arg1)->addListener(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_remove_listener(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  Leap::Listener *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller *","removeListener", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Listener,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Listener &","removeListener", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Listener &","removeListener", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Listener * >(argp2);
  result = (bool)(arg1)->removeListener(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_frame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Leap::Frame > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller const *","frame", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","frame", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ((Leap::Controller const *)arg1)->frame(arg2);
  vresult = SWIG_NewPointerObj((new Leap::Frame(static_cast< const Leap::Frame& >(result))), SWIGTYPE_p_Leap__Frame, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_frame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Leap::Frame > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller const *","frame", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  result = ((Leap::Controller const *)arg1)->frame();
  vresult = SWIG_NewPointerObj((new Leap::Frame(static_cast< const Leap::Frame& >(result))), SWIGTYPE_p_Leap__Frame, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Controller_frame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Controller, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Controller_frame__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Controller, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Controller_frame__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Controller.frame", 
    "    Leap::Frame Controller.frame(int history)\n"
    "    Leap::Frame Controller.frame()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_enable_gesture__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  Leap::Gesture::Type arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller const *","enableGesture", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Leap::Gesture::Type","enableGesture", 2, argv[0] ));
  } 
  arg2 = static_cast< Leap::Gesture::Type >(val2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","enableGesture", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  ((Leap::Controller const *)arg1)->enableGesture(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_enable_gesture__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  Leap::Gesture::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller const *","enableGesture", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Leap::Gesture::Type","enableGesture", 2, argv[0] ));
  } 
  arg2 = static_cast< Leap::Gesture::Type >(val2);
  ((Leap::Controller const *)arg1)->enableGesture(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Controller_enable_gesture(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Controller, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Controller_enable_gesture__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Leap__Controller, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Controller_enable_gesture__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Controller.enable_gesture", 
    "    void Controller.enable_gesture(Leap::Gesture::Type type, bool enable)\n"
    "    void Controller.enable_gesture(Leap::Gesture::Type type)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_is_gesture_enabled(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  Leap::Gesture::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller const *","isGestureEnabled", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Leap::Gesture::Type","isGestureEnabled", 2, argv[0] ));
  } 
  arg2 = static_cast< Leap::Gesture::Type >(val2);
  result = (bool)((Leap::Controller const *)arg1)->isGestureEnabled(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_is_connected_get(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller *","isConnected", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  result = (bool)Leap_Controller_isConnected_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_has_focus_get(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller *","hasFocus", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  result = (bool)Leap_Controller_hasFocus_get(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_policy_flags_get(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Controller::PolicyFlag result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller *","policyFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  result = (Leap::Controller::PolicyFlag)Leap_Controller_policyFlags_get(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_config_get(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::Config *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller *","config", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  result = (Leap::Config *)Leap_Controller_config_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__Config, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_located_screens_get(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::ScreenList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller *","locatedScreens", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  result = (Leap::ScreenList *)Leap_Controller_locatedScreens_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__ScreenList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Controller_calibrated_screens_get(int argc, VALUE *argv, VALUE self) {
  Leap::Controller *arg1 = (Leap::Controller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Leap::ScreenList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Controller *","calibratedScreens", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Controller * >(argp1);
  result = (Leap::ScreenList *)Leap_Controller_calibratedScreens_get(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Leap__ScreenList, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassListener;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Listener_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Listener_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Leap__Listener);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Listener(int argc, VALUE *argv, VALUE self) {
  VALUE arg1 = (VALUE) 0 ;
  const char *classname SWIGUNUSED = "Leap::Motion::Listener";
  Leap::Listener *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  arg1 = self;
  if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
    /* subclassed */
    result = (Leap::Listener *)new SwigDirector_Listener(arg1); 
  } else {
    result = (Leap::Listener *)new Leap::Listener(); 
  }
  
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Leap_Listener(Leap::Listener *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Listener_on_init(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = (Leap::Listener *) 0 ;
  Leap::Controller *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener *","onInit", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Controller,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Controller const &","onInit", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Controller const &","onInit", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Controller * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    if (upcall) {
      (arg1)->Leap::Listener::onInit((Leap::Controller const &)*arg2);
    } else {
      (arg1)->onInit((Leap::Controller const &)*arg2);
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Listener_on_connect(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = (Leap::Listener *) 0 ;
  Leap::Controller *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener *","onConnect", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Controller,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Controller const &","onConnect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Controller const &","onConnect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Controller * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    if (upcall) {
      (arg1)->Leap::Listener::onConnect((Leap::Controller const &)*arg2);
    } else {
      (arg1)->onConnect((Leap::Controller const &)*arg2);
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Listener_on_disconnect(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = (Leap::Listener *) 0 ;
  Leap::Controller *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener *","onDisconnect", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Controller,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Controller const &","onDisconnect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Controller const &","onDisconnect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Controller * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    if (upcall) {
      (arg1)->Leap::Listener::onDisconnect((Leap::Controller const &)*arg2);
    } else {
      (arg1)->onDisconnect((Leap::Controller const &)*arg2);
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Listener_on_exit(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = (Leap::Listener *) 0 ;
  Leap::Controller *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener *","onExit", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Controller,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Controller const &","onExit", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Controller const &","onExit", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Controller * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    if (upcall) {
      (arg1)->Leap::Listener::onExit((Leap::Controller const &)*arg2);
    } else {
      (arg1)->onExit((Leap::Controller const &)*arg2);
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Listener_on_frame(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = (Leap::Listener *) 0 ;
  Leap::Controller *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener *","onFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Controller,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Controller const &","onFrame", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Controller const &","onFrame", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Controller * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    if (upcall) {
      (arg1)->Leap::Listener::onFrame((Leap::Controller const &)*arg2);
    } else {
      (arg1)->onFrame((Leap::Controller const &)*arg2);
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Listener_on_focus_gained(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = (Leap::Listener *) 0 ;
  Leap::Controller *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener *","onFocusGained", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Controller,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Controller const &","onFocusGained", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Controller const &","onFocusGained", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Controller * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    if (upcall) {
      (arg1)->Leap::Listener::onFocusGained((Leap::Controller const &)*arg2);
    } else {
      (arg1)->onFocusGained((Leap::Controller const &)*arg2);
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Listener_on_focus_lost(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = (Leap::Listener *) 0 ;
  Leap::Controller *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Leap__Listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener *","onFocusLost", 1, self )); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Leap__Controller,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Leap::Controller const &","onFocusLost", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Leap::Controller const &","onFocusLost", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Leap::Controller * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    if (upcall) {
      (arg1)->Leap::Listener::onFocusLost((Leap::Controller const &)*arg2);
    } else {
      (arg1)->onFocusLost((Leap::Controller const &)*arg2);
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_disown_Listener(int argc, VALUE *argv, VALUE self) {
  Leap::Listener *arg1 = (Leap::Listener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Leap__Listener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Leap::Listener *","disown_Listener", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Leap::Listener * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  return Qnil;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static void *_p_Leap__ToolTo_p_Leap__Pointable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Pointable *)  ((Leap::Tool *) x));
}
static void *_p_Leap__FingerTo_p_Leap__Pointable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Pointable *)  ((Leap::Finger *) x));
}
static void *_p_Leap__SwipeGestureTo_p_Leap__Gesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Gesture *)  ((Leap::SwipeGesture *) x));
}
static void *_p_Leap__CircleGestureTo_p_Leap__Gesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Gesture *)  ((Leap::CircleGesture *) x));
}
static void *_p_Leap__ScreenTapGestureTo_p_Leap__Gesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Gesture *)  ((Leap::ScreenTapGesture *) x));
}
static void *_p_Leap__KeyTapGestureTo_p_Leap__Gesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Gesture *)  ((Leap::KeyTapGesture *) x));
}
static void *_p_Leap__HandListTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::HandList *) x));
}
static void *_p_Leap__FrameTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::Frame *) x));
}
static void *_p_Leap__FingerListTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::FingerList *) x));
}
static void *_p_Leap__ScreenTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::Screen *) x));
}
static void *_p_Leap__HandTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::Hand *) x));
}
static void *_p_Leap__KeyTapGestureTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *) (Leap::Gesture *) ((Leap::KeyTapGesture *) x));
}
static void *_p_Leap__ScreenTapGestureTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *) (Leap::Gesture *) ((Leap::ScreenTapGesture *) x));
}
static void *_p_Leap__CircleGestureTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *) (Leap::Gesture *) ((Leap::CircleGesture *) x));
}
static void *_p_Leap__SwipeGestureTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *) (Leap::Gesture *) ((Leap::SwipeGesture *) x));
}
static void *_p_Leap__GestureTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::Gesture *) x));
}
static void *_p_Leap__ToolTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *) (Leap::Pointable *) ((Leap::Tool *) x));
}
static void *_p_Leap__ScreenListTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::ScreenList *) x));
}
static void *_p_Leap__GestureListTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::GestureList *) x));
}
static void *_p_Leap__PointableListTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::PointableList *) x));
}
static void *_p_Leap__PointableTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::Pointable *) x));
}
static void *_p_Leap__ToolListTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::ToolList *) x));
}
static void *_p_Leap__ConfigTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::Config *) x));
}
static void *_p_Leap__ControllerTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *)  ((Leap::Controller *) x));
}
static void *_p_Leap__FingerTo_p_Leap__Interface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Leap::Interface *) (Leap::Pointable *) ((Leap::Finger *) x));
}
static swig_type_info _swigt__p_Leap__CircleGesture = {"_p_Leap__CircleGesture", "Leap::CircleGesture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Config = {"_p_Leap__Config", "Leap::Config *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Controller = {"_p_Leap__Controller", "Leap::Controller *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Finger = {"_p_Leap__Finger", "Leap::Finger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__FingerList = {"_p_Leap__FingerList", "Leap::FingerList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Frame = {"_p_Leap__Frame", "Leap::Frame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Gesture = {"_p_Leap__Gesture", "Leap::Gesture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__GestureList = {"_p_Leap__GestureList", "Leap::GestureList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Hand = {"_p_Leap__Hand", "Leap::Hand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__HandList = {"_p_Leap__HandList", "Leap::HandList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Interface = {"_p_Leap__Interface", "Leap::Interface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__KeyTapGesture = {"_p_Leap__KeyTapGesture", "Leap::KeyTapGesture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Listener = {"_p_Leap__Listener", "Leap::Listener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Matrix = {"_p_Leap__Matrix", "Leap::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Pointable = {"_p_Leap__Pointable", "Leap::Pointable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__PointableList = {"_p_Leap__PointableList", "Leap::PointableList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Screen = {"_p_Leap__Screen", "Leap::Screen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__ScreenList = {"_p_Leap__ScreenList", "Leap::ScreenList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__ScreenTapGesture = {"_p_Leap__ScreenTapGesture", "Leap::ScreenTapGesture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__SwipeGesture = {"_p_Leap__SwipeGesture", "Leap::SwipeGesture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Tool = {"_p_Leap__Tool", "Leap::Tool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__ToolList = {"_p_Leap__ToolList", "Leap::ToolList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Leap__Vector = {"_p_Leap__Vector", "Leap::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Leap__CircleGesture,
  &_swigt__p_Leap__Config,
  &_swigt__p_Leap__Controller,
  &_swigt__p_Leap__Finger,
  &_swigt__p_Leap__FingerList,
  &_swigt__p_Leap__Frame,
  &_swigt__p_Leap__Gesture,
  &_swigt__p_Leap__GestureList,
  &_swigt__p_Leap__Hand,
  &_swigt__p_Leap__HandList,
  &_swigt__p_Leap__Interface,
  &_swigt__p_Leap__KeyTapGesture,
  &_swigt__p_Leap__Listener,
  &_swigt__p_Leap__Matrix,
  &_swigt__p_Leap__Pointable,
  &_swigt__p_Leap__PointableList,
  &_swigt__p_Leap__Screen,
  &_swigt__p_Leap__ScreenList,
  &_swigt__p_Leap__ScreenTapGesture,
  &_swigt__p_Leap__SwipeGesture,
  &_swigt__p_Leap__Tool,
  &_swigt__p_Leap__ToolList,
  &_swigt__p_Leap__Vector,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Leap__CircleGesture[] = {  {&_swigt__p_Leap__CircleGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Config[] = {  {&_swigt__p_Leap__Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Controller[] = {  {&_swigt__p_Leap__Controller, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Finger[] = {  {&_swigt__p_Leap__Finger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__FingerList[] = {  {&_swigt__p_Leap__FingerList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Frame[] = {  {&_swigt__p_Leap__Frame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Gesture[] = {  {&_swigt__p_Leap__Gesture, 0, 0, 0},  {&_swigt__p_Leap__SwipeGesture, _p_Leap__SwipeGestureTo_p_Leap__Gesture, 0, 0},  {&_swigt__p_Leap__CircleGesture, _p_Leap__CircleGestureTo_p_Leap__Gesture, 0, 0},  {&_swigt__p_Leap__ScreenTapGesture, _p_Leap__ScreenTapGestureTo_p_Leap__Gesture, 0, 0},  {&_swigt__p_Leap__KeyTapGesture, _p_Leap__KeyTapGestureTo_p_Leap__Gesture, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__GestureList[] = {  {&_swigt__p_Leap__GestureList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Hand[] = {  {&_swigt__p_Leap__Hand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__HandList[] = {  {&_swigt__p_Leap__HandList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Interface[] = {  {&_swigt__p_Leap__HandList, _p_Leap__HandListTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Frame, _p_Leap__FrameTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__FingerList, _p_Leap__FingerListTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__KeyTapGesture, _p_Leap__KeyTapGestureTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__ScreenTapGesture, _p_Leap__ScreenTapGestureTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__CircleGesture, _p_Leap__CircleGestureTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__SwipeGesture, _p_Leap__SwipeGestureTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Gesture, _p_Leap__GestureTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__ScreenList, _p_Leap__ScreenListTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__GestureList, _p_Leap__GestureListTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__PointableList, _p_Leap__PointableListTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Pointable, _p_Leap__PointableTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Config, _p_Leap__ConfigTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Finger, _p_Leap__FingerTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__ToolList, _p_Leap__ToolListTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Interface, 0, 0, 0},  {&_swigt__p_Leap__Controller, _p_Leap__ControllerTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Screen, _p_Leap__ScreenTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Tool, _p_Leap__ToolTo_p_Leap__Interface, 0, 0},  {&_swigt__p_Leap__Hand, _p_Leap__HandTo_p_Leap__Interface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__KeyTapGesture[] = {  {&_swigt__p_Leap__KeyTapGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Listener[] = {  {&_swigt__p_Leap__Listener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Matrix[] = {  {&_swigt__p_Leap__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Pointable[] = {  {&_swigt__p_Leap__Finger, _p_Leap__FingerTo_p_Leap__Pointable, 0, 0},  {&_swigt__p_Leap__Pointable, 0, 0, 0},  {&_swigt__p_Leap__Tool, _p_Leap__ToolTo_p_Leap__Pointable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__PointableList[] = {  {&_swigt__p_Leap__PointableList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Screen[] = {  {&_swigt__p_Leap__Screen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__ScreenList[] = {  {&_swigt__p_Leap__ScreenList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__ScreenTapGesture[] = {  {&_swigt__p_Leap__ScreenTapGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__SwipeGesture[] = {  {&_swigt__p_Leap__SwipeGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Tool[] = {  {&_swigt__p_Leap__Tool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__ToolList[] = {  {&_swigt__p_Leap__ToolList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Leap__Vector[] = {  {&_swigt__p_Leap__Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Leap__CircleGesture,
  _swigc__p_Leap__Config,
  _swigc__p_Leap__Controller,
  _swigc__p_Leap__Finger,
  _swigc__p_Leap__FingerList,
  _swigc__p_Leap__Frame,
  _swigc__p_Leap__Gesture,
  _swigc__p_Leap__GestureList,
  _swigc__p_Leap__Hand,
  _swigc__p_Leap__HandList,
  _swigc__p_Leap__Interface,
  _swigc__p_Leap__KeyTapGesture,
  _swigc__p_Leap__Listener,
  _swigc__p_Leap__Matrix,
  _swigc__p_Leap__Pointable,
  _swigc__p_Leap__PointableList,
  _swigc__p_Leap__Screen,
  _swigc__p_Leap__ScreenList,
  _swigc__p_Leap__ScreenTapGesture,
  _swigc__p_Leap__SwipeGesture,
  _swigc__p_Leap__Tool,
  _swigc__p_Leap__ToolList,
  _swigc__p_Leap__Vector,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_motion(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mMotion = rb_define_module("Leap");
  mMotion = rb_define_module_under(mMotion, "Motion");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mMotion, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::GC_VALUE::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mMotion, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mMotion, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  rb_define_singleton_method(mMotion, "PI", VALUEFUNC(_wrap_PI_get), 0);
  rb_define_singleton_method(mMotion, "DEG_TO_RAD", VALUEFUNC(_wrap_DEG_TO_RAD_get), 0);
  rb_define_singleton_method(mMotion, "RAD_TO_DEG", VALUEFUNC(_wrap_RAD_TO_DEG_get), 0);
  
  SwigClassVector.klass = rb_define_class_under(mMotion, "Vector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Vector, (void *) &SwigClassVector);
  rb_define_alloc_func(SwigClassVector.klass, _wrap_Vector_allocate);
  rb_define_method(SwigClassVector.klass, "initialize", VALUEFUNC(_wrap_new_Vector), -1);
  rb_define_method(SwigClassVector.klass, "distance_to", VALUEFUNC(_wrap_Vector_distance_to), -1);
  rb_define_method(SwigClassVector.klass, "angle_to", VALUEFUNC(_wrap_Vector_angle_to), -1);
  rb_define_method(SwigClassVector.klass, "dot", VALUEFUNC(_wrap_Vector_dot), -1);
  rb_define_method(SwigClassVector.klass, "cross", VALUEFUNC(_wrap_Vector_cross), -1);
  rb_define_method(SwigClassVector.klass, "-@", VALUEFUNC(_wrap_Vector___neg__), -1);
  rb_define_method(SwigClassVector.klass, "+", VALUEFUNC(_wrap_Vector___add__), -1);
  rb_define_method(SwigClassVector.klass, "-", VALUEFUNC(_wrap_Vector___sub__), -1);
  rb_define_method(SwigClassVector.klass, "*", VALUEFUNC(_wrap_Vector___mul__), -1);
  rb_define_method(SwigClassVector.klass, "/", VALUEFUNC(_wrap_Vector___div__), -1);
  rb_define_method(SwigClassVector.klass, "to_s", VALUEFUNC(_wrap_Vector_to_s), -1);
  rb_define_method(SwigClassVector.klass, "==", VALUEFUNC(_wrap_Vector___eq__), -1);
  rb_define_method(SwigClassVector.klass, "is_valid", VALUEFUNC(_wrap_Vector_is_valid), -1);
  rb_define_method(SwigClassVector.klass, "x=", VALUEFUNC(_wrap_Vector_x_set), -1);
  rb_define_method(SwigClassVector.klass, "x", VALUEFUNC(_wrap_Vector_x_get), -1);
  rb_define_method(SwigClassVector.klass, "y=", VALUEFUNC(_wrap_Vector_y_set), -1);
  rb_define_method(SwigClassVector.klass, "y", VALUEFUNC(_wrap_Vector_y_get), -1);
  rb_define_method(SwigClassVector.klass, "z=", VALUEFUNC(_wrap_Vector_z_set), -1);
  rb_define_method(SwigClassVector.klass, "z", VALUEFUNC(_wrap_Vector_z_get), -1);
  rb_define_method(SwigClassVector.klass, "magnitude", VALUEFUNC(_wrap_Vector_magnitude_get), -1);
  rb_define_method(SwigClassVector.klass, "magnitude_squared", VALUEFUNC(_wrap_Vector_magnitude_squared_get), -1);
  rb_define_method(SwigClassVector.klass, "pitch", VALUEFUNC(_wrap_Vector_pitch_get), -1);
  rb_define_method(SwigClassVector.klass, "roll", VALUEFUNC(_wrap_Vector_roll_get), -1);
  rb_define_method(SwigClassVector.klass, "yaw", VALUEFUNC(_wrap_Vector_yaw_get), -1);
  rb_define_method(SwigClassVector.klass, "normalized", VALUEFUNC(_wrap_Vector_normalized_get), -1);
  rb_define_singleton_method(SwigClassVector.klass, "zero", VALUEFUNC(_wrap_Vector_zero_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "x_axis", VALUEFUNC(_wrap_Vector_x_axis_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "y_axis", VALUEFUNC(_wrap_Vector_y_axis_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "z_axis", VALUEFUNC(_wrap_Vector_z_axis_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "forward", VALUEFUNC(_wrap_Vector_forward_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "backward", VALUEFUNC(_wrap_Vector_backward_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "left", VALUEFUNC(_wrap_Vector_left_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "right", VALUEFUNC(_wrap_Vector_right_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "up", VALUEFUNC(_wrap_Vector_up_get), 0);
  rb_define_singleton_method(SwigClassVector.klass, "down", VALUEFUNC(_wrap_Vector_down_get), 0);
  SwigClassVector.mark = 0;
  SwigClassVector.destroy = (void (*)(void *)) free_Leap_Vector;
  SwigClassVector.trackObjects = 0;
  
  SwigClassMatrix.klass = rb_define_class_under(mMotion, "Matrix", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Matrix, (void *) &SwigClassMatrix);
  rb_define_alloc_func(SwigClassMatrix.klass, _wrap_Matrix_allocate);
  rb_define_method(SwigClassMatrix.klass, "initialize", VALUEFUNC(_wrap_new_Matrix), -1);
  rb_define_method(SwigClassMatrix.klass, "set_rotation", VALUEFUNC(_wrap_Matrix_set_rotation), -1);
  rb_define_method(SwigClassMatrix.klass, "transform_point", VALUEFUNC(_wrap_Matrix_transform_point), -1);
  rb_define_method(SwigClassMatrix.klass, "transform_direction", VALUEFUNC(_wrap_Matrix_transform_direction), -1);
  rb_define_method(SwigClassMatrix.klass, "rigid_inverse", VALUEFUNC(_wrap_Matrix_rigid_inverse), -1);
  rb_define_method(SwigClassMatrix.klass, "*", VALUEFUNC(_wrap_Matrix___mul__), -1);
  rb_define_method(SwigClassMatrix.klass, "==", VALUEFUNC(_wrap_Matrix___eq__), -1);
  rb_define_method(SwigClassMatrix.klass, "to_s", VALUEFUNC(_wrap_Matrix_to_s), -1);
  rb_define_method(SwigClassMatrix.klass, "x_basis=", VALUEFUNC(_wrap_Matrix_x_basis_set), -1);
  rb_define_method(SwigClassMatrix.klass, "x_basis", VALUEFUNC(_wrap_Matrix_x_basis_get), -1);
  rb_define_method(SwigClassMatrix.klass, "y_basis=", VALUEFUNC(_wrap_Matrix_y_basis_set), -1);
  rb_define_method(SwigClassMatrix.klass, "y_basis", VALUEFUNC(_wrap_Matrix_y_basis_get), -1);
  rb_define_method(SwigClassMatrix.klass, "z_basis=", VALUEFUNC(_wrap_Matrix_z_basis_set), -1);
  rb_define_method(SwigClassMatrix.klass, "z_basis", VALUEFUNC(_wrap_Matrix_z_basis_get), -1);
  rb_define_method(SwigClassMatrix.klass, "origin=", VALUEFUNC(_wrap_Matrix_origin_set), -1);
  rb_define_method(SwigClassMatrix.klass, "origin", VALUEFUNC(_wrap_Matrix_origin_get), -1);
  rb_define_singleton_method(SwigClassMatrix.klass, "identity", VALUEFUNC(_wrap_Matrix_identity_get), 0);
  SwigClassMatrix.mark = 0;
  SwigClassMatrix.destroy = (void (*)(void *)) free_Leap_Matrix;
  SwigClassMatrix.trackObjects = 0;
  
  SwigClassInterface.klass = rb_define_class_under(mMotion, "Interface", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Interface, (void *) &SwigClassInterface);
  rb_undef_alloc_func(SwigClassInterface.klass);
  SwigClassInterface.mark = 0;
  SwigClassInterface.trackObjects = 0;
  
  SwigClassPointable.klass = rb_define_class_under(mMotion, "Pointable", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Pointable, (void *) &SwigClassPointable);
  rb_define_alloc_func(SwigClassPointable.klass, _wrap_Pointable_allocate);
  rb_define_method(SwigClassPointable.klass, "initialize", VALUEFUNC(_wrap_new_Pointable), -1);
  rb_define_method(SwigClassPointable.klass, "==", VALUEFUNC(_wrap_Pointable___eq__), -1);
  rb_define_method(SwigClassPointable.klass, "to_s", VALUEFUNC(_wrap_Pointable_to_s), -1);
  rb_define_method(SwigClassPointable.klass, "id", VALUEFUNC(_wrap_Pointable_id_get), -1);
  rb_define_method(SwigClassPointable.klass, "hand", VALUEFUNC(_wrap_Pointable_hand_get), -1);
  rb_define_method(SwigClassPointable.klass, "tip_position", VALUEFUNC(_wrap_Pointable_tip_position_get), -1);
  rb_define_method(SwigClassPointable.klass, "tip_velocity", VALUEFUNC(_wrap_Pointable_tip_velocity_get), -1);
  rb_define_method(SwigClassPointable.klass, "direction", VALUEFUNC(_wrap_Pointable_direction_get), -1);
  rb_define_method(SwigClassPointable.klass, "width", VALUEFUNC(_wrap_Pointable_width_get), -1);
  rb_define_method(SwigClassPointable.klass, "length", VALUEFUNC(_wrap_Pointable_length_get), -1);
  rb_define_method(SwigClassPointable.klass, "is_tool", VALUEFUNC(_wrap_Pointable_is_tool_get), -1);
  rb_define_method(SwigClassPointable.klass, "is_finger", VALUEFUNC(_wrap_Pointable_is_finger_get), -1);
  rb_define_method(SwigClassPointable.klass, "is_valid", VALUEFUNC(_wrap_Pointable_is_valid_get), -1);
  rb_define_method(SwigClassPointable.klass, "frame", VALUEFUNC(_wrap_Pointable_frame_get), -1);
  rb_define_singleton_method(SwigClassPointable.klass, "invalid", VALUEFUNC(_wrap_Pointable_invalid_get), 0);
  SwigClassPointable.mark = 0;
  SwigClassPointable.destroy = (void (*)(void *)) free_Leap_Pointable;
  SwigClassPointable.trackObjects = 0;
  
  SwigClassFinger.klass = rb_define_class_under(mMotion, "Finger", ((swig_class *) SWIGTYPE_p_Leap__Pointable->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Finger, (void *) &SwigClassFinger);
  rb_define_alloc_func(SwigClassFinger.klass, _wrap_Finger_allocate);
  rb_define_method(SwigClassFinger.klass, "initialize", VALUEFUNC(_wrap_new_Finger), -1);
  rb_define_method(SwigClassFinger.klass, "to_s", VALUEFUNC(_wrap_Finger_to_s), -1);
  rb_define_singleton_method(SwigClassFinger.klass, "invalid", VALUEFUNC(_wrap_Finger_invalid_get), 0);
  SwigClassFinger.mark = 0;
  SwigClassFinger.destroy = (void (*)(void *)) free_Leap_Finger;
  SwigClassFinger.trackObjects = 0;
  
  SwigClassTool.klass = rb_define_class_under(mMotion, "Tool", ((swig_class *) SWIGTYPE_p_Leap__Pointable->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Tool, (void *) &SwigClassTool);
  rb_define_alloc_func(SwigClassTool.klass, _wrap_Tool_allocate);
  rb_define_method(SwigClassTool.klass, "initialize", VALUEFUNC(_wrap_new_Tool), -1);
  rb_define_method(SwigClassTool.klass, "to_s", VALUEFUNC(_wrap_Tool_to_s), -1);
  rb_define_singleton_method(SwigClassTool.klass, "invalid", VALUEFUNC(_wrap_Tool_invalid_get), 0);
  SwigClassTool.mark = 0;
  SwigClassTool.destroy = (void (*)(void *)) free_Leap_Tool;
  SwigClassTool.trackObjects = 0;
  
  SwigClassHand.klass = rb_define_class_under(mMotion, "Hand", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Hand, (void *) &SwigClassHand);
  rb_define_alloc_func(SwigClassHand.klass, _wrap_Hand_allocate);
  rb_define_method(SwigClassHand.klass, "initialize", VALUEFUNC(_wrap_new_Hand), -1);
  rb_define_method(SwigClassHand.klass, "pointable", VALUEFUNC(_wrap_Hand_pointable), -1);
  rb_define_method(SwigClassHand.klass, "finger", VALUEFUNC(_wrap_Hand_finger), -1);
  rb_define_method(SwigClassHand.klass, "tool", VALUEFUNC(_wrap_Hand_tool), -1);
  rb_define_method(SwigClassHand.klass, "translation", VALUEFUNC(_wrap_Hand_translation), -1);
  rb_define_method(SwigClassHand.klass, "translation_probability", VALUEFUNC(_wrap_Hand_translation_probability), -1);
  rb_define_method(SwigClassHand.klass, "rotation_axis", VALUEFUNC(_wrap_Hand_rotation_axis), -1);
  rb_define_method(SwigClassHand.klass, "rotation_angle", VALUEFUNC(_wrap_Hand_rotation_angle), -1);
  rb_define_method(SwigClassHand.klass, "rotation_matrix", VALUEFUNC(_wrap_Hand_rotation_matrix), -1);
  rb_define_method(SwigClassHand.klass, "rotation_probability", VALUEFUNC(_wrap_Hand_rotation_probability), -1);
  rb_define_method(SwigClassHand.klass, "scale_factor", VALUEFUNC(_wrap_Hand_scale_factor), -1);
  rb_define_method(SwigClassHand.klass, "scale_probability", VALUEFUNC(_wrap_Hand_scale_probability), -1);
  rb_define_method(SwigClassHand.klass, "==", VALUEFUNC(_wrap_Hand___eq__), -1);
  rb_define_method(SwigClassHand.klass, "to_s", VALUEFUNC(_wrap_Hand_to_s), -1);
  rb_define_method(SwigClassHand.klass, "id", VALUEFUNC(_wrap_Hand_id_get), -1);
  rb_define_method(SwigClassHand.klass, "pointables", VALUEFUNC(_wrap_Hand_pointables_get), -1);
  rb_define_method(SwigClassHand.klass, "fingers", VALUEFUNC(_wrap_Hand_fingers_get), -1);
  rb_define_method(SwigClassHand.klass, "tools", VALUEFUNC(_wrap_Hand_tools_get), -1);
  rb_define_method(SwigClassHand.klass, "palm_position", VALUEFUNC(_wrap_Hand_palm_position_get), -1);
  rb_define_method(SwigClassHand.klass, "palm_velocity", VALUEFUNC(_wrap_Hand_palm_velocity_get), -1);
  rb_define_method(SwigClassHand.klass, "palm_normal", VALUEFUNC(_wrap_Hand_palm_normal_get), -1);
  rb_define_method(SwigClassHand.klass, "direction", VALUEFUNC(_wrap_Hand_direction_get), -1);
  rb_define_method(SwigClassHand.klass, "is_valid", VALUEFUNC(_wrap_Hand_is_valid_get), -1);
  rb_define_method(SwigClassHand.klass, "sphere_center", VALUEFUNC(_wrap_Hand_sphere_center_get), -1);
  rb_define_method(SwigClassHand.klass, "sphere_radius", VALUEFUNC(_wrap_Hand_sphere_radius_get), -1);
  rb_define_method(SwigClassHand.klass, "frame", VALUEFUNC(_wrap_Hand_frame_get), -1);
  rb_define_singleton_method(SwigClassHand.klass, "invalid", VALUEFUNC(_wrap_Hand_invalid_get), 0);
  SwigClassHand.mark = 0;
  SwigClassHand.destroy = (void (*)(void *)) free_Leap_Hand;
  SwigClassHand.trackObjects = 0;
  
  SwigClassGesture.klass = rb_define_class_under(mMotion, "Gesture", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Gesture, (void *) &SwigClassGesture);
  rb_define_alloc_func(SwigClassGesture.klass, _wrap_Gesture_allocate);
  rb_define_method(SwigClassGesture.klass, "initialize", VALUEFUNC(_wrap_new_Gesture), -1);
  rb_define_const(SwigClassGesture.klass, "TYPE_INVALID", SWIG_From_int(static_cast< int >(Leap::Gesture::TYPE_INVALID)));
  rb_define_const(SwigClassGesture.klass, "TYPE_SWIPE", SWIG_From_int(static_cast< int >(Leap::Gesture::TYPE_SWIPE)));
  rb_define_const(SwigClassGesture.klass, "TYPE_CIRCLE", SWIG_From_int(static_cast< int >(Leap::Gesture::TYPE_CIRCLE)));
  rb_define_const(SwigClassGesture.klass, "TYPE_SCREEN_TAP", SWIG_From_int(static_cast< int >(Leap::Gesture::TYPE_SCREEN_TAP)));
  rb_define_const(SwigClassGesture.klass, "TYPE_KEY_TAP", SWIG_From_int(static_cast< int >(Leap::Gesture::TYPE_KEY_TAP)));
  rb_define_const(SwigClassGesture.klass, "STATE_INVALID", SWIG_From_int(static_cast< int >(Leap::Gesture::STATE_INVALID)));
  rb_define_const(SwigClassGesture.klass, "STATE_START", SWIG_From_int(static_cast< int >(Leap::Gesture::STATE_START)));
  rb_define_const(SwigClassGesture.klass, "STATE_UPDATE", SWIG_From_int(static_cast< int >(Leap::Gesture::STATE_UPDATE)));
  rb_define_const(SwigClassGesture.klass, "STATE_STOP", SWIG_From_int(static_cast< int >(Leap::Gesture::STATE_STOP)));
  rb_define_method(SwigClassGesture.klass, "==", VALUEFUNC(_wrap_Gesture___eq__), -1);
  rb_define_method(SwigClassGesture.klass, "to_s", VALUEFUNC(_wrap_Gesture_to_s), -1);
  rb_define_method(SwigClassGesture.klass, "type", VALUEFUNC(_wrap_Gesture_type_get), -1);
  rb_define_method(SwigClassGesture.klass, "state", VALUEFUNC(_wrap_Gesture_state_get), -1);
  rb_define_method(SwigClassGesture.klass, "id", VALUEFUNC(_wrap_Gesture_id_get), -1);
  rb_define_method(SwigClassGesture.klass, "duration", VALUEFUNC(_wrap_Gesture_duration_get), -1);
  rb_define_method(SwigClassGesture.klass, "duration_seconds", VALUEFUNC(_wrap_Gesture_duration_seconds_get), -1);
  rb_define_method(SwigClassGesture.klass, "frame", VALUEFUNC(_wrap_Gesture_frame_get), -1);
  rb_define_method(SwigClassGesture.klass, "hands", VALUEFUNC(_wrap_Gesture_hands_get), -1);
  rb_define_method(SwigClassGesture.klass, "pointables", VALUEFUNC(_wrap_Gesture_pointables_get), -1);
  rb_define_method(SwigClassGesture.klass, "is_valid", VALUEFUNC(_wrap_Gesture_is_valid_get), -1);
  rb_define_singleton_method(SwigClassGesture.klass, "invalid", VALUEFUNC(_wrap_Gesture_invalid_get), 0);
  SwigClassGesture.mark = 0;
  SwigClassGesture.destroy = (void (*)(void *)) free_Leap_Gesture;
  SwigClassGesture.trackObjects = 0;
  
  SwigClassSwipeGesture.klass = rb_define_class_under(mMotion, "SwipeGesture", ((swig_class *) SWIGTYPE_p_Leap__Gesture->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__SwipeGesture, (void *) &SwigClassSwipeGesture);
  rb_define_alloc_func(SwigClassSwipeGesture.klass, _wrap_SwipeGesture_allocate);
  rb_define_method(SwigClassSwipeGesture.klass, "initialize", VALUEFUNC(_wrap_new_SwipeGesture), -1);
  rb_define_singleton_method(SwigClassSwipeGesture.klass, "class_type", VALUEFUNC(_wrap_SwipeGesture_class_type), -1);
  rb_define_method(SwigClassSwipeGesture.klass, "start_position", VALUEFUNC(_wrap_SwipeGesture_start_position_get), -1);
  rb_define_method(SwigClassSwipeGesture.klass, "position", VALUEFUNC(_wrap_SwipeGesture_position_get), -1);
  rb_define_method(SwigClassSwipeGesture.klass, "direction", VALUEFUNC(_wrap_SwipeGesture_direction_get), -1);
  rb_define_method(SwigClassSwipeGesture.klass, "speed", VALUEFUNC(_wrap_SwipeGesture_speed_get), -1);
  rb_define_method(SwigClassSwipeGesture.klass, "pointable", VALUEFUNC(_wrap_SwipeGesture_pointable_get), -1);
  SwigClassSwipeGesture.mark = 0;
  SwigClassSwipeGesture.destroy = (void (*)(void *)) free_Leap_SwipeGesture;
  SwigClassSwipeGesture.trackObjects = 0;
  
  SwigClassCircleGesture.klass = rb_define_class_under(mMotion, "CircleGesture", ((swig_class *) SWIGTYPE_p_Leap__Gesture->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__CircleGesture, (void *) &SwigClassCircleGesture);
  rb_define_alloc_func(SwigClassCircleGesture.klass, _wrap_CircleGesture_allocate);
  rb_define_method(SwigClassCircleGesture.klass, "initialize", VALUEFUNC(_wrap_new_CircleGesture), -1);
  rb_define_singleton_method(SwigClassCircleGesture.klass, "class_type", VALUEFUNC(_wrap_CircleGesture_class_type), -1);
  rb_define_method(SwigClassCircleGesture.klass, "center", VALUEFUNC(_wrap_CircleGesture_center_get), -1);
  rb_define_method(SwigClassCircleGesture.klass, "normal", VALUEFUNC(_wrap_CircleGesture_normal_get), -1);
  rb_define_method(SwigClassCircleGesture.klass, "progress", VALUEFUNC(_wrap_CircleGesture_progress_get), -1);
  rb_define_method(SwigClassCircleGesture.klass, "radius", VALUEFUNC(_wrap_CircleGesture_radius_get), -1);
  rb_define_method(SwigClassCircleGesture.klass, "pointable", VALUEFUNC(_wrap_CircleGesture_pointable_get), -1);
  SwigClassCircleGesture.mark = 0;
  SwigClassCircleGesture.destroy = (void (*)(void *)) free_Leap_CircleGesture;
  SwigClassCircleGesture.trackObjects = 0;
  
  SwigClassScreenTapGesture.klass = rb_define_class_under(mMotion, "ScreenTapGesture", ((swig_class *) SWIGTYPE_p_Leap__Gesture->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__ScreenTapGesture, (void *) &SwigClassScreenTapGesture);
  rb_define_alloc_func(SwigClassScreenTapGesture.klass, _wrap_ScreenTapGesture_allocate);
  rb_define_method(SwigClassScreenTapGesture.klass, "initialize", VALUEFUNC(_wrap_new_ScreenTapGesture), -1);
  rb_define_singleton_method(SwigClassScreenTapGesture.klass, "class_type", VALUEFUNC(_wrap_ScreenTapGesture_class_type), -1);
  rb_define_method(SwigClassScreenTapGesture.klass, "position", VALUEFUNC(_wrap_ScreenTapGesture_position_get), -1);
  rb_define_method(SwigClassScreenTapGesture.klass, "direction", VALUEFUNC(_wrap_ScreenTapGesture_direction_get), -1);
  rb_define_method(SwigClassScreenTapGesture.klass, "progress", VALUEFUNC(_wrap_ScreenTapGesture_progress_get), -1);
  rb_define_method(SwigClassScreenTapGesture.klass, "pointable", VALUEFUNC(_wrap_ScreenTapGesture_pointable_get), -1);
  SwigClassScreenTapGesture.mark = 0;
  SwigClassScreenTapGesture.destroy = (void (*)(void *)) free_Leap_ScreenTapGesture;
  SwigClassScreenTapGesture.trackObjects = 0;
  
  SwigClassKeyTapGesture.klass = rb_define_class_under(mMotion, "KeyTapGesture", ((swig_class *) SWIGTYPE_p_Leap__Gesture->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__KeyTapGesture, (void *) &SwigClassKeyTapGesture);
  rb_define_alloc_func(SwigClassKeyTapGesture.klass, _wrap_KeyTapGesture_allocate);
  rb_define_method(SwigClassKeyTapGesture.klass, "initialize", VALUEFUNC(_wrap_new_KeyTapGesture), -1);
  rb_define_singleton_method(SwigClassKeyTapGesture.klass, "class_type", VALUEFUNC(_wrap_KeyTapGesture_class_type), -1);
  rb_define_method(SwigClassKeyTapGesture.klass, "position", VALUEFUNC(_wrap_KeyTapGesture_position_get), -1);
  rb_define_method(SwigClassKeyTapGesture.klass, "direction", VALUEFUNC(_wrap_KeyTapGesture_direction_get), -1);
  rb_define_method(SwigClassKeyTapGesture.klass, "progress", VALUEFUNC(_wrap_KeyTapGesture_progress_get), -1);
  rb_define_method(SwigClassKeyTapGesture.klass, "pointable", VALUEFUNC(_wrap_KeyTapGesture_pointable_get), -1);
  SwigClassKeyTapGesture.mark = 0;
  SwigClassKeyTapGesture.destroy = (void (*)(void *)) free_Leap_KeyTapGesture;
  SwigClassKeyTapGesture.trackObjects = 0;
  
  SwigClassScreen.klass = rb_define_class_under(mMotion, "Screen", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Screen, (void *) &SwigClassScreen);
  rb_define_alloc_func(SwigClassScreen.klass, _wrap_Screen_allocate);
  rb_define_method(SwigClassScreen.klass, "initialize", VALUEFUNC(_wrap_new_Screen), -1);
  rb_define_method(SwigClassScreen.klass, "intersect", VALUEFUNC(_wrap_Screen_intersect), -1);
  rb_define_method(SwigClassScreen.klass, "project", VALUEFUNC(_wrap_Screen_project), -1);
  rb_define_method(SwigClassScreen.klass, "normal", VALUEFUNC(_wrap_Screen_normal), -1);
  rb_define_method(SwigClassScreen.klass, "distance_to_point", VALUEFUNC(_wrap_Screen_distance_to_point), -1);
  rb_define_method(SwigClassScreen.klass, "==", VALUEFUNC(_wrap_Screen___eq__), -1);
  rb_define_method(SwigClassScreen.klass, "to_s", VALUEFUNC(_wrap_Screen_to_s), -1);
  rb_define_method(SwigClassScreen.klass, "id", VALUEFUNC(_wrap_Screen_id_get), -1);
  rb_define_method(SwigClassScreen.klass, "horizontal_axis", VALUEFUNC(_wrap_Screen_horizontal_axis_get), -1);
  rb_define_method(SwigClassScreen.klass, "vertical_axis", VALUEFUNC(_wrap_Screen_vertical_axis_get), -1);
  rb_define_method(SwigClassScreen.klass, "bottom_left_corner", VALUEFUNC(_wrap_Screen_bottom_left_corner_get), -1);
  rb_define_method(SwigClassScreen.klass, "width_pixels", VALUEFUNC(_wrap_Screen_width_pixels_get), -1);
  rb_define_method(SwigClassScreen.klass, "height_pixels", VALUEFUNC(_wrap_Screen_height_pixels_get), -1);
  rb_define_method(SwigClassScreen.klass, "is_valid", VALUEFUNC(_wrap_Screen_is_valid_get), -1);
  rb_define_singleton_method(SwigClassScreen.klass, "invalid", VALUEFUNC(_wrap_Screen_invalid_get), 0);
  SwigClassScreen.mark = 0;
  SwigClassScreen.destroy = (void (*)(void *)) free_Leap_Screen;
  SwigClassScreen.trackObjects = 0;
  
  SwigClassPointableList.klass = rb_define_class_under(mMotion, "PointableList", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__PointableList, (void *) &SwigClassPointableList);
  rb_define_alloc_func(SwigClassPointableList.klass, _wrap_PointableList_allocate);
  rb_define_method(SwigClassPointableList.klass, "initialize", VALUEFUNC(_wrap_new_PointableList), -1);
  rb_define_method(SwigClassPointableList.klass, "count", VALUEFUNC(_wrap_PointableList_count), -1);
  rb_define_method(SwigClassPointableList.klass, "append", VALUEFUNC(_wrap_PointableList_append), -1);
  rb_define_method(SwigClassPointableList.klass, "is_empty", VALUEFUNC(_wrap_PointableList_is_empty_get), -1);
  rb_define_method(SwigClassPointableList.klass, "empty", VALUEFUNC(_wrap_PointableList_empty_get), -1);
  rb_define_method(SwigClassPointableList.klass, "leftmost", VALUEFUNC(_wrap_PointableList_leftmost_get), -1);
  rb_define_method(SwigClassPointableList.klass, "rightmost", VALUEFUNC(_wrap_PointableList_rightmost_get), -1);
  rb_define_method(SwigClassPointableList.klass, "frontmost", VALUEFUNC(_wrap_PointableList_frontmost_get), -1);
  SwigClassPointableList.mark = 0;
  SwigClassPointableList.destroy = (void (*)(void *)) free_Leap_PointableList;
  SwigClassPointableList.trackObjects = 0;
  
  SwigClassFingerList.klass = rb_define_class_under(mMotion, "FingerList", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__FingerList, (void *) &SwigClassFingerList);
  rb_define_alloc_func(SwigClassFingerList.klass, _wrap_FingerList_allocate);
  rb_define_method(SwigClassFingerList.klass, "initialize", VALUEFUNC(_wrap_new_FingerList), -1);
  rb_define_method(SwigClassFingerList.klass, "count", VALUEFUNC(_wrap_FingerList_count), -1);
  rb_define_method(SwigClassFingerList.klass, "append", VALUEFUNC(_wrap_FingerList_append), -1);
  rb_define_method(SwigClassFingerList.klass, "is_empty", VALUEFUNC(_wrap_FingerList_is_empty_get), -1);
  rb_define_method(SwigClassFingerList.klass, "empty", VALUEFUNC(_wrap_FingerList_empty_get), -1);
  rb_define_method(SwigClassFingerList.klass, "leftmost", VALUEFUNC(_wrap_FingerList_leftmost_get), -1);
  rb_define_method(SwigClassFingerList.klass, "rightmost", VALUEFUNC(_wrap_FingerList_rightmost_get), -1);
  rb_define_method(SwigClassFingerList.klass, "frontmost", VALUEFUNC(_wrap_FingerList_frontmost_get), -1);
  SwigClassFingerList.mark = 0;
  SwigClassFingerList.destroy = (void (*)(void *)) free_Leap_FingerList;
  SwigClassFingerList.trackObjects = 0;
  
  SwigClassToolList.klass = rb_define_class_under(mMotion, "ToolList", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__ToolList, (void *) &SwigClassToolList);
  rb_define_alloc_func(SwigClassToolList.klass, _wrap_ToolList_allocate);
  rb_define_method(SwigClassToolList.klass, "initialize", VALUEFUNC(_wrap_new_ToolList), -1);
  rb_define_method(SwigClassToolList.klass, "count", VALUEFUNC(_wrap_ToolList_count), -1);
  rb_define_method(SwigClassToolList.klass, "append", VALUEFUNC(_wrap_ToolList_append), -1);
  rb_define_method(SwigClassToolList.klass, "is_empty", VALUEFUNC(_wrap_ToolList_is_empty_get), -1);
  rb_define_method(SwigClassToolList.klass, "empty", VALUEFUNC(_wrap_ToolList_empty_get), -1);
  rb_define_method(SwigClassToolList.klass, "leftmost", VALUEFUNC(_wrap_ToolList_leftmost_get), -1);
  rb_define_method(SwigClassToolList.klass, "rightmost", VALUEFUNC(_wrap_ToolList_rightmost_get), -1);
  rb_define_method(SwigClassToolList.klass, "frontmost", VALUEFUNC(_wrap_ToolList_frontmost_get), -1);
  SwigClassToolList.mark = 0;
  SwigClassToolList.destroy = (void (*)(void *)) free_Leap_ToolList;
  SwigClassToolList.trackObjects = 0;
  
  SwigClassHandList.klass = rb_define_class_under(mMotion, "HandList", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__HandList, (void *) &SwigClassHandList);
  rb_define_alloc_func(SwigClassHandList.klass, _wrap_HandList_allocate);
  rb_define_method(SwigClassHandList.klass, "initialize", VALUEFUNC(_wrap_new_HandList), -1);
  rb_define_method(SwigClassHandList.klass, "count", VALUEFUNC(_wrap_HandList_count), -1);
  rb_define_method(SwigClassHandList.klass, "append", VALUEFUNC(_wrap_HandList_append), -1);
  rb_define_method(SwigClassHandList.klass, "is_empty", VALUEFUNC(_wrap_HandList_is_empty_get), -1);
  rb_define_method(SwigClassHandList.klass, "empty", VALUEFUNC(_wrap_HandList_empty_get), -1);
  rb_define_method(SwigClassHandList.klass, "leftmost", VALUEFUNC(_wrap_HandList_leftmost_get), -1);
  rb_define_method(SwigClassHandList.klass, "rightmost", VALUEFUNC(_wrap_HandList_rightmost_get), -1);
  rb_define_method(SwigClassHandList.klass, "frontmost", VALUEFUNC(_wrap_HandList_frontmost_get), -1);
  SwigClassHandList.mark = 0;
  SwigClassHandList.destroy = (void (*)(void *)) free_Leap_HandList;
  SwigClassHandList.trackObjects = 0;
  
  SwigClassGestureList.klass = rb_define_class_under(mMotion, "GestureList", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__GestureList, (void *) &SwigClassGestureList);
  rb_define_alloc_func(SwigClassGestureList.klass, _wrap_GestureList_allocate);
  rb_define_method(SwigClassGestureList.klass, "initialize", VALUEFUNC(_wrap_new_GestureList), -1);
  rb_define_method(SwigClassGestureList.klass, "count", VALUEFUNC(_wrap_GestureList_count), -1);
  rb_define_method(SwigClassGestureList.klass, "append", VALUEFUNC(_wrap_GestureList_append), -1);
  rb_define_method(SwigClassGestureList.klass, "is_empty", VALUEFUNC(_wrap_GestureList_is_empty_get), -1);
  rb_define_method(SwigClassGestureList.klass, "empty", VALUEFUNC(_wrap_GestureList_empty_get), -1);
  SwigClassGestureList.mark = 0;
  SwigClassGestureList.destroy = (void (*)(void *)) free_Leap_GestureList;
  SwigClassGestureList.trackObjects = 0;
  
  SwigClassScreenList.klass = rb_define_class_under(mMotion, "ScreenList", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__ScreenList, (void *) &SwigClassScreenList);
  rb_define_alloc_func(SwigClassScreenList.klass, _wrap_ScreenList_allocate);
  rb_define_method(SwigClassScreenList.klass, "initialize", VALUEFUNC(_wrap_new_ScreenList), -1);
  rb_define_method(SwigClassScreenList.klass, "count", VALUEFUNC(_wrap_ScreenList_count), -1);
  rb_define_method(SwigClassScreenList.klass, "closest_screen_hit", VALUEFUNC(_wrap_ScreenList_closest_screen_hit), -1);
  rb_define_method(SwigClassScreenList.klass, "closest_screen", VALUEFUNC(_wrap_ScreenList_closest_screen), -1);
  rb_define_method(SwigClassScreenList.klass, "is_empty", VALUEFUNC(_wrap_ScreenList_is_empty_get), -1);
  rb_define_method(SwigClassScreenList.klass, "empty", VALUEFUNC(_wrap_ScreenList_empty_get), -1);
  SwigClassScreenList.mark = 0;
  SwigClassScreenList.destroy = (void (*)(void *)) free_Leap_ScreenList;
  SwigClassScreenList.trackObjects = 0;
  
  SwigClassFrame.klass = rb_define_class_under(mMotion, "Frame", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Frame, (void *) &SwigClassFrame);
  rb_define_alloc_func(SwigClassFrame.klass, _wrap_Frame_allocate);
  rb_define_method(SwigClassFrame.klass, "initialize", VALUEFUNC(_wrap_new_Frame), -1);
  rb_define_method(SwigClassFrame.klass, "hand", VALUEFUNC(_wrap_Frame_hand), -1);
  rb_define_method(SwigClassFrame.klass, "pointable", VALUEFUNC(_wrap_Frame_pointable), -1);
  rb_define_method(SwigClassFrame.klass, "finger", VALUEFUNC(_wrap_Frame_finger), -1);
  rb_define_method(SwigClassFrame.klass, "tool", VALUEFUNC(_wrap_Frame_tool), -1);
  rb_define_method(SwigClassFrame.klass, "gesture", VALUEFUNC(_wrap_Frame_gesture), -1);
  rb_define_method(SwigClassFrame.klass, "gestures", VALUEFUNC(_wrap_Frame_gestures), -1);
  rb_define_method(SwigClassFrame.klass, "translation", VALUEFUNC(_wrap_Frame_translation), -1);
  rb_define_method(SwigClassFrame.klass, "translation_probability", VALUEFUNC(_wrap_Frame_translation_probability), -1);
  rb_define_method(SwigClassFrame.klass, "rotation_axis", VALUEFUNC(_wrap_Frame_rotation_axis), -1);
  rb_define_method(SwigClassFrame.klass, "rotation_angle", VALUEFUNC(_wrap_Frame_rotation_angle), -1);
  rb_define_method(SwigClassFrame.klass, "rotation_matrix", VALUEFUNC(_wrap_Frame_rotation_matrix), -1);
  rb_define_method(SwigClassFrame.klass, "rotation_probability", VALUEFUNC(_wrap_Frame_rotation_probability), -1);
  rb_define_method(SwigClassFrame.klass, "scale_factor", VALUEFUNC(_wrap_Frame_scale_factor), -1);
  rb_define_method(SwigClassFrame.klass, "scale_probability", VALUEFUNC(_wrap_Frame_scale_probability), -1);
  rb_define_method(SwigClassFrame.klass, "==", VALUEFUNC(_wrap_Frame___eq__), -1);
  rb_define_method(SwigClassFrame.klass, "to_s", VALUEFUNC(_wrap_Frame_to_s), -1);
  rb_define_method(SwigClassFrame.klass, "id", VALUEFUNC(_wrap_Frame_id_get), -1);
  rb_define_method(SwigClassFrame.klass, "timestamp", VALUEFUNC(_wrap_Frame_timestamp_get), -1);
  rb_define_method(SwigClassFrame.klass, "pointables", VALUEFUNC(_wrap_Frame_pointables_get), -1);
  rb_define_method(SwigClassFrame.klass, "fingers", VALUEFUNC(_wrap_Frame_fingers_get), -1);
  rb_define_method(SwigClassFrame.klass, "tools", VALUEFUNC(_wrap_Frame_tools_get), -1);
  rb_define_method(SwigClassFrame.klass, "hands", VALUEFUNC(_wrap_Frame_hands_get), -1);
  rb_define_method(SwigClassFrame.klass, "is_valid", VALUEFUNC(_wrap_Frame_is_valid_get), -1);
  rb_define_singleton_method(SwigClassFrame.klass, "invalid", VALUEFUNC(_wrap_Frame_invalid_get), 0);
  SwigClassFrame.mark = 0;
  SwigClassFrame.destroy = (void (*)(void *)) free_Leap_Frame;
  SwigClassFrame.trackObjects = 0;
  
  SwigClassConfig.klass = rb_define_class_under(mMotion, "Config", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Config, (void *) &SwigClassConfig);
  rb_define_alloc_func(SwigClassConfig.klass, _wrap_Config_allocate);
  rb_define_method(SwigClassConfig.klass, "initialize", VALUEFUNC(_wrap_new_Config), -1);
  rb_define_const(SwigClassConfig.klass, "TYPE_UNKNOWN", SWIG_From_int(static_cast< int >(Leap::Config::TYPE_UNKNOWN)));
  rb_define_const(SwigClassConfig.klass, "TYPE_BOOLEAN", SWIG_From_int(static_cast< int >(Leap::Config::TYPE_BOOLEAN)));
  rb_define_const(SwigClassConfig.klass, "TYPE_INT32", SWIG_From_int(static_cast< int >(Leap::Config::TYPE_INT32)));
  rb_define_const(SwigClassConfig.klass, "TYPE_FLOAT", SWIG_From_int(static_cast< int >(Leap::Config::TYPE_FLOAT)));
  rb_define_const(SwigClassConfig.klass, "TYPE_STRING", SWIG_From_int(static_cast< int >(Leap::Config::TYPE_STRING)));
  rb_define_method(SwigClassConfig.klass, "type", VALUEFUNC(_wrap_Config_type), -1);
  rb_define_method(SwigClassConfig.klass, "get_bool", VALUEFUNC(_wrap_Config_get_bool), -1);
  rb_define_method(SwigClassConfig.klass, "set_bool", VALUEFUNC(_wrap_Config_set_bool), -1);
  rb_define_method(SwigClassConfig.klass, "get_int_32", VALUEFUNC(_wrap_Config_get_int_32), -1);
  rb_define_method(SwigClassConfig.klass, "set_int_32", VALUEFUNC(_wrap_Config_set_int_32), -1);
  rb_define_method(SwigClassConfig.klass, "get_float", VALUEFUNC(_wrap_Config_get_float), -1);
  rb_define_method(SwigClassConfig.klass, "set_float", VALUEFUNC(_wrap_Config_set_float), -1);
  rb_define_method(SwigClassConfig.klass, "get_string", VALUEFUNC(_wrap_Config_get_string), -1);
  rb_define_method(SwigClassConfig.klass, "set_string", VALUEFUNC(_wrap_Config_set_string), -1);
  rb_define_method(SwigClassConfig.klass, "save", VALUEFUNC(_wrap_Config_save), -1);
  SwigClassConfig.mark = 0;
  SwigClassConfig.destroy = (void (*)(void *)) free_Leap_Config;
  SwigClassConfig.trackObjects = 0;
  
  SwigClassController.klass = rb_define_class_under(mMotion, "Controller", ((swig_class *) SWIGTYPE_p_Leap__Interface->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Controller, (void *) &SwigClassController);
  rb_define_alloc_func(SwigClassController.klass, _wrap_Controller_allocate);
  rb_define_method(SwigClassController.klass, "initialize", VALUEFUNC(_wrap_new_Controller), -1);
  rb_define_const(SwigClassController.klass, "POLICY_DEFAULT", SWIG_From_int(static_cast< int >(Leap::Controller::POLICY_DEFAULT)));
  rb_define_const(SwigClassController.klass, "POLICY_BACKGROUND_FRAMES", SWIG_From_int(static_cast< int >(Leap::Controller::POLICY_BACKGROUND_FRAMES)));
  rb_define_method(SwigClassController.klass, "set_policy_flags", VALUEFUNC(_wrap_Controller_set_policy_flags), -1);
  rb_define_method(SwigClassController.klass, "add_listener", VALUEFUNC(_wrap_Controller_add_listener), -1);
  rb_define_method(SwigClassController.klass, "remove_listener", VALUEFUNC(_wrap_Controller_remove_listener), -1);
  rb_define_method(SwigClassController.klass, "frame", VALUEFUNC(_wrap_Controller_frame), -1);
  rb_define_method(SwigClassController.klass, "enable_gesture", VALUEFUNC(_wrap_Controller_enable_gesture), -1);
  rb_define_method(SwigClassController.klass, "is_gesture_enabled", VALUEFUNC(_wrap_Controller_is_gesture_enabled), -1);
  rb_define_method(SwigClassController.klass, "is_connected", VALUEFUNC(_wrap_Controller_is_connected_get), -1);
  rb_define_method(SwigClassController.klass, "has_focus", VALUEFUNC(_wrap_Controller_has_focus_get), -1);
  rb_define_method(SwigClassController.klass, "policy_flags", VALUEFUNC(_wrap_Controller_policy_flags_get), -1);
  rb_define_method(SwigClassController.klass, "config", VALUEFUNC(_wrap_Controller_config_get), -1);
  rb_define_method(SwigClassController.klass, "located_screens", VALUEFUNC(_wrap_Controller_located_screens_get), -1);
  rb_define_method(SwigClassController.klass, "calibrated_screens", VALUEFUNC(_wrap_Controller_calibrated_screens_get), -1);
  SwigClassController.mark = 0;
  SwigClassController.destroy = (void (*)(void *)) free_Leap_Controller;
  SwigClassController.trackObjects = 0;
  rb_define_module_function(mMotion, "disown_Listener", VALUEFUNC(_wrap_disown_Listener), -1);
  
  SwigClassListener.klass = rb_define_class_under(mMotion, "Listener", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Leap__Listener, (void *) &SwigClassListener);
  rb_define_alloc_func(SwigClassListener.klass, _wrap_Listener_allocate);
  rb_define_method(SwigClassListener.klass, "initialize", VALUEFUNC(_wrap_new_Listener), -1);
  rb_define_method(SwigClassListener.klass, "on_init", VALUEFUNC(_wrap_Listener_on_init), -1);
  rb_define_method(SwigClassListener.klass, "on_connect", VALUEFUNC(_wrap_Listener_on_connect), -1);
  rb_define_method(SwigClassListener.klass, "on_disconnect", VALUEFUNC(_wrap_Listener_on_disconnect), -1);
  rb_define_method(SwigClassListener.klass, "on_exit", VALUEFUNC(_wrap_Listener_on_exit), -1);
  rb_define_method(SwigClassListener.klass, "on_frame", VALUEFUNC(_wrap_Listener_on_frame), -1);
  rb_define_method(SwigClassListener.klass, "on_focus_gained", VALUEFUNC(_wrap_Listener_on_focus_gained), -1);
  rb_define_method(SwigClassListener.klass, "on_focus_lost", VALUEFUNC(_wrap_Listener_on_focus_lost), -1);
  SwigClassListener.mark = 0;
  SwigClassListener.destroy = (void (*)(void *)) free_Leap_Listener;
  SwigClassListener.trackObjects = 0;
}

